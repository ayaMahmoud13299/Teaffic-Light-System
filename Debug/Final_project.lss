
Final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00001384  00001418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064a  00800094  00800094  0000144c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003399  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001134  00000000  00000000  00004ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021d7  00000000  00000000  00005cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ac  00000000  00000000  00007eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011db  00000000  00000000  00008758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002955  00000000  00000000  00009933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000c288  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	61 00       	.word	0x0061	; ????
      56:	65 00       	.word	0x0065	; ????
      58:	6c 00       	.word	0x006c	; ????
      5a:	73 00       	.word	0x0073	; ????
      5c:	7a 00       	.word	0x007a	; ????
      5e:	81 00       	.word	0x0081	; ????
      60:	88 00       	.word	0x0088	; ????
      62:	8f 00       	.word	0x008f	; ????
      64:	96 00       	.word	0x0096	; ????
      66:	9d 00       	.word	0x009d	; ????

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	10 e0       	ldi	r17, 0x00	; 0
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e4 e8       	ldi	r30, 0x84	; 132
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 39       	cpi	r26, 0x94	; 148
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a4 e9       	ldi	r26, 0x94	; 148
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 3d       	cpi	r26, 0xDE	; 222
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3f 09 	call	0x127e	; 0x127e <main>
      9e:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <display_seg_init>:
	 }
	
}
void display_seg_init(uint8 PortName)
{
	DDRC|=(0x0F<<0)|(0x03<<4);
      a6:	84 b3       	in	r24, 0x14	; 20
      a8:	8f 63       	ori	r24, 0x3F	; 63
      aa:	84 bb       	out	0x14, r24	; 20
      ac:	08 95       	ret

000000ae <display_fun>:
{
	uint8 BCD_Num;
	
	
		BCD_Num=num;
		switch(BCD_Num){
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	8a 30       	cpi	r24, 0x0A	; 10
      b2:	91 05       	cpc	r25, r1
      b4:	08 f0       	brcs	.+2      	; 0xb8 <display_fun+0xa>
      b6:	47 c0       	rjmp	.+142    	; 0x146 <display_fun+0x98>
      b8:	fc 01       	movw	r30, r24
      ba:	e6 5d       	subi	r30, 0xD6	; 214
      bc:	ff 4f       	sbci	r31, 0xFF	; 255
      be:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__tablejump2__>
			case 0:
			{
				PORTC&=~(1<<0)&~(1<<1)&~(1<<2)&~(1<<3);
      c2:	85 b3       	in	r24, 0x15	; 21
      c4:	80 7f       	andi	r24, 0xF0	; 240
      c6:	85 bb       	out	0x15, r24	; 21
				break;
      c8:	08 95       	ret
			}
			case 1:
			{
				PORTC|=(1<<0);
      ca:	85 b3       	in	r24, 0x15	; 21
      cc:	81 60       	ori	r24, 0x01	; 1
      ce:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<3)&~(1<<1)&~(1<<2);
      d0:	85 b3       	in	r24, 0x15	; 21
      d2:	81 7f       	andi	r24, 0xF1	; 241
      d4:	85 bb       	out	0x15, r24	; 21
				break;
      d6:	08 95       	ret
			}
			case 2:
			{
				PORTC|=(1<<1);
      d8:	85 b3       	in	r24, 0x15	; 21
      da:	82 60       	ori	r24, 0x02	; 2
      dc:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<3)&~(1<<0)&~(1<<2);
      de:	85 b3       	in	r24, 0x15	; 21
      e0:	82 7f       	andi	r24, 0xF2	; 242
      e2:	85 bb       	out	0x15, r24	; 21
				break;
      e4:	08 95       	ret
			}
			case 3:
			{
				PORTC|=(1<<0)|(1<<1);
      e6:	85 b3       	in	r24, 0x15	; 21
      e8:	83 60       	ori	r24, 0x03	; 3
      ea:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<3)&~(1<<2);
      ec:	85 b3       	in	r24, 0x15	; 21
      ee:	83 7f       	andi	r24, 0xF3	; 243
      f0:	85 bb       	out	0x15, r24	; 21
				break;
      f2:	08 95       	ret
			}
			case 4:
			{
				PORTC|=(1<<2);
      f4:	85 b3       	in	r24, 0x15	; 21
      f6:	84 60       	ori	r24, 0x04	; 4
      f8:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<0)&~(1<<1)&~(1<<3);
      fa:	85 b3       	in	r24, 0x15	; 21
      fc:	84 7f       	andi	r24, 0xF4	; 244
      fe:	85 bb       	out	0x15, r24	; 21
				break;
     100:	08 95       	ret
			}
			case 5:
			{
				PORTC|=(1<<0)|(1<<2);
     102:	85 b3       	in	r24, 0x15	; 21
     104:	85 60       	ori	r24, 0x05	; 5
     106:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<3)&~(1<<1);
     108:	85 b3       	in	r24, 0x15	; 21
     10a:	85 7f       	andi	r24, 0xF5	; 245
     10c:	85 bb       	out	0x15, r24	; 21
				break;
     10e:	08 95       	ret
			}
			case 6:
			{
				PORTC|=(1<<1)|(1<<2);
     110:	85 b3       	in	r24, 0x15	; 21
     112:	86 60       	ori	r24, 0x06	; 6
     114:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<3)&~(1<<0);
     116:	85 b3       	in	r24, 0x15	; 21
     118:	86 7f       	andi	r24, 0xF6	; 246
     11a:	85 bb       	out	0x15, r24	; 21
				break;
     11c:	08 95       	ret
			}
			case 7:
			{
				PORTC|=(1<<0)|(1<<1)|(1<<2);
     11e:	85 b3       	in	r24, 0x15	; 21
     120:	87 60       	ori	r24, 0x07	; 7
     122:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<3);
     124:	85 b3       	in	r24, 0x15	; 21
     126:	87 7f       	andi	r24, 0xF7	; 247
     128:	85 bb       	out	0x15, r24	; 21
				break;
     12a:	08 95       	ret
			}
			case 8:
			{
				PORTC|=(1<<3);
     12c:	85 b3       	in	r24, 0x15	; 21
     12e:	88 60       	ori	r24, 0x08	; 8
     130:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<0)&~(1<<1)&~(1<<2);
     132:	85 b3       	in	r24, 0x15	; 21
     134:	88 7f       	andi	r24, 0xF8	; 248
     136:	85 bb       	out	0x15, r24	; 21
				break;
     138:	08 95       	ret
			}
			case 9:
			{
				PORTC|=(1<<0)|(1<<3);
     13a:	85 b3       	in	r24, 0x15	; 21
     13c:	89 60       	ori	r24, 0x09	; 9
     13e:	85 bb       	out	0x15, r24	; 21
				PORTC&=~(1<<1)&~(1<<2);
     140:	85 b3       	in	r24, 0x15	; 21
     142:	89 7f       	andi	r24, 0xF9	; 249
     144:	85 bb       	out	0x15, r24	; 21
     146:	08 95       	ret

00000148 <two_digit_7seg>:

#include "micro_config.h"


void two_digit_7seg(uint8 tensnum)
{
     148:	0f 93       	push	r16
     14a:	1f 93       	push	r17
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
	uint16 i;
	uint16 count;
	if (tensnum==0)
     150:	81 11       	cpse	r24, r1
     152:	03 c0       	rjmp	.+6      	; 0x15a <two_digit_7seg+0x12>
	{
		display_fun(0);
     154:	0e 94 57 00 	call	0xae	; 0xae <display_fun>
			// }
		 }
		 display_off();
	 }
	
}
     158:	3b c0       	rjmp	.+118    	; 0x1d0 <two_digit_7seg+0x88>
		display_fun(0);
	 }
	 else
	 {
		 
		 for(count=tensnum;count>=0;count--)
     15a:	08 2f       	mov	r16, r24
     15c:	10 e0       	ldi	r17, 0x00	; 0
		 {
			 
			 //for (i=0;i<=3;i++){
				 
				 display_fun(count/10);
     15e:	98 01       	movw	r18, r16
     160:	ad ec       	ldi	r26, 0xCD	; 205
     162:	bc ec       	ldi	r27, 0xCC	; 204
     164:	0e 94 b1 09 	call	0x1362	; 0x1362 <__umulhisi3>
     168:	ec 01       	movw	r28, r24
     16a:	d6 95       	lsr	r29
     16c:	c7 95       	ror	r28
     16e:	d6 95       	lsr	r29
     170:	c7 95       	ror	r28
     172:	d6 95       	lsr	r29
     174:	c7 95       	ror	r28
     176:	8c 2f       	mov	r24, r28
     178:	0e 94 57 00 	call	0xae	; 0xae <display_fun>
				 TENSPINENABLE;
     17c:	85 b3       	in	r24, 0x15	; 21
     17e:	8f 7e       	andi	r24, 0xEF	; 239
     180:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     182:	83 ec       	ldi	r24, 0xC3	; 195
     184:	99 e0       	ldi	r25, 0x09	; 9
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <two_digit_7seg+0x3e>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <two_digit_7seg+0x44>
     18c:	00 00       	nop
				 _delay_ms(10);
				 TENSPINDISABLE;
     18e:	85 b3       	in	r24, 0x15	; 21
     190:	80 61       	ori	r24, 0x10	; 16
     192:	85 bb       	out	0x15, r24	; 21
				 display_fun(count%10);
     194:	ce 01       	movw	r24, r28
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	cc 0f       	add	r28, r28
     19c:	dd 1f       	adc	r29, r29
     19e:	cc 0f       	add	r28, r28
     1a0:	dd 1f       	adc	r29, r29
     1a2:	cc 0f       	add	r28, r28
     1a4:	dd 1f       	adc	r29, r29
     1a6:	c8 0f       	add	r28, r24
     1a8:	d9 1f       	adc	r29, r25
     1aa:	80 2f       	mov	r24, r16
     1ac:	8c 1b       	sub	r24, r28
     1ae:	0e 94 57 00 	call	0xae	; 0xae <display_fun>
				 UNITSPINENABLE;
     1b2:	85 b3       	in	r24, 0x15	; 21
     1b4:	8f 7d       	andi	r24, 0xDF	; 223
     1b6:	85 bb       	out	0x15, r24	; 21
     1b8:	83 ec       	ldi	r24, 0xC3	; 195
     1ba:	99 e0       	ldi	r25, 0x09	; 9
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <two_digit_7seg+0x74>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <two_digit_7seg+0x7a>
     1c2:	00 00       	nop
				 _delay_ms(10);
				 UNITSPINDISABLE;
     1c4:	85 b3       	in	r24, 0x15	; 21
     1c6:	80 62       	ori	r24, 0x20	; 32
     1c8:	85 bb       	out	0x15, r24	; 21
		display_fun(0);
	 }
	 else
	 {
		 
		 for(count=tensnum;count>=0;count--)
     1ca:	01 50       	subi	r16, 0x01	; 1
     1cc:	11 09       	sbc	r17, r1
     1ce:	c7 cf       	rjmp	.-114    	; 0x15e <two_digit_7seg+0x16>
			// }
		 }
		 display_off();
	 }
	
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	08 95       	ret

000001da <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     1da:	17 b8       	out	0x07, r1	; 7
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     1dc:	83 e8       	ldi	r24, 0x83	; 131
     1de:	86 b9       	out	0x06, r24	; 6
     1e0:	08 95       	ret

000001e2 <ADC_readChannel>:
}

uint16 ADC_readChannel(uint8 channel_num)
{
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     1e2:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     1e4:	97 b1       	in	r25, 0x07	; 7
     1e6:	90 7e       	andi	r25, 0xE0	; 224
     1e8:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     1ea:	97 b1       	in	r25, 0x07	; 7
     1ec:	89 2b       	or	r24, r25
     1ee:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     1f0:	86 b1       	in	r24, 0x06	; 6
     1f2:	80 64       	ori	r24, 0x40	; 64
     1f4:	86 b9       	out	0x06, r24	; 6
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     1f6:	34 9b       	sbis	0x06, 4	; 6
     1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <ADC_readChannel+0x14>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     1fa:	86 b1       	in	r24, 0x06	; 6
     1fc:	80 61       	ori	r24, 0x10	; 16
     1fe:	86 b9       	out	0x06, r24	; 6
	return ADC; /* return the data register */
     200:	84 b1       	in	r24, 0x04	; 4
     202:	95 b1       	in	r25, 0x05	; 5
}
     204:	08 95       	ret

00000206 <pwm_init>:
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/1 CS00=1 CS01=0 CS02=0
	 *F(PWM)=100KHZ , F_CPU=1MH , COUNTER VALUE =10
	 */ 
	/* Set Timer Initial Value to 0 */
	TCNT0 = 246; 
     206:	86 ef       	ldi	r24, 0xF6	; 246
     208:	82 bf       	out	0x32, r24	; 50
	
	/*set fast PWM mode with non-inverted output*/
	TCCR0 |= (1<<WGM00) | (1<<WGM01)|(1<<CS00)|(1<<COM01) ; //fast pwm
     20a:	83 b7       	in	r24, 0x33	; 51
     20c:	89 66       	ori	r24, 0x69	; 105
     20e:	83 bf       	out	0x33, r24	; 51
	
	/*co pin for timer0 */
	DDRB  |= (1<<3); 
     210:	87 b3       	in	r24, 0x17	; 23
     212:	88 60       	ori	r24, 0x08	; 8
     214:	87 bb       	out	0x17, r24	; 23
     216:	08 95       	ret

00000218 <pwm_fun>:
	
}
void pwm_fun(uint8 duty)
{
	OCR0=duty;
     218:	8c bf       	out	0x3c, r24	; 60
     21a:	08 95       	ret

0000021c <leds_init>:
	
}
void leds_init(void)
{
	DDRB|=(1<<6);
     21c:	87 b3       	in	r24, 0x17	; 23
     21e:	80 64       	ori	r24, 0x40	; 64
     220:	87 bb       	out	0x17, r24	; 23
	DDRC|=(1<<6)|(1<<7);
     222:	84 b3       	in	r24, 0x14	; 20
     224:	80 6c       	ori	r24, 0xC0	; 192
     226:	84 bb       	out	0x14, r24	; 20
     228:	08 95       	ret

0000022a <traffic_light_handele>:
}
void traffic_light_handele(uint8 ledcolor)
{
	PORTB&=~(1<<6);
     22a:	98 b3       	in	r25, 0x18	; 24
     22c:	9f 7b       	andi	r25, 0xBF	; 191
     22e:	98 bb       	out	0x18, r25	; 24
	PORTC&=~(1<<6)&~(1<<7);
     230:	95 b3       	in	r25, 0x15	; 21
     232:	9f 73       	andi	r25, 0x3F	; 63
     234:	95 bb       	out	0x15, r25	; 21
	uint8 color =ledcolor;
	switch (color)
     236:	81 30       	cpi	r24, 0x01	; 1
     238:	41 f0       	breq	.+16     	; 0x24a <traffic_light_handele+0x20>
     23a:	18 f0       	brcs	.+6      	; 0x242 <traffic_light_handele+0x18>
     23c:	82 30       	cpi	r24, 0x02	; 2
     23e:	49 f0       	breq	.+18     	; 0x252 <traffic_light_handele+0x28>
     240:	08 95       	ret
	{
	case red :
	{
		PORTC|=(1<<6);
     242:	85 b3       	in	r24, 0x15	; 21
     244:	80 64       	ori	r24, 0x40	; 64
     246:	85 bb       	out	0x15, r24	; 21
		break;
     248:	08 95       	ret
	}
	
		case green :
		{
			PORTB|=(1<<6);
     24a:	88 b3       	in	r24, 0x18	; 24
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	88 bb       	out	0x18, r24	; 24
			break;
     250:	08 95       	ret
		}
		
		case yellow :
		{
			PORTC|=(1<<7);
     252:	85 b3       	in	r24, 0x15	; 21
     254:	80 68       	ori	r24, 0x80	; 128
     256:	85 bb       	out	0x15, r24	; 21
     258:	08 95       	ret

0000025a <__vector_10>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{		
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
}
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <UART_init>:
void UART_init(uint32 baud_rate)
{
	uint16 ubrr_value = 0;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     26e:	22 e0       	ldi	r18, 0x02	; 2
     270:	2b b9       	out	0x0b, r18	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     272:	28 e1       	ldi	r18, 0x18	; 24
     274:	2a b9       	out	0x0a, r18	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
     276:	26 e8       	ldi	r18, 0x86	; 134
     278:	20 bd       	out	0x20, r18	; 32
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	aa 1f       	adc	r26, r26
     284:	bb 1f       	adc	r27, r27
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	aa 1f       	adc	r26, r26
     28c:	bb 1f       	adc	r27, r27
     28e:	9c 01       	movw	r18, r24
     290:	ad 01       	movw	r20, r26
     292:	22 0f       	add	r18, r18
     294:	33 1f       	adc	r19, r19
     296:	44 1f       	adc	r20, r20
     298:	55 1f       	adc	r21, r21
     29a:	60 e4       	ldi	r22, 0x40	; 64
     29c:	72 e4       	ldi	r23, 0x42	; 66
     29e:	8f e0       	ldi	r24, 0x0F	; 15
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 89 09 	call	0x1312	; 0x1312 <__udivmodsi4>
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	31 09       	sbc	r19, r1

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     2aa:	30 bd       	out	0x20, r19	; 32
	UBRRL = ubrr_value;
     2ac:	29 b9       	out	0x09, r18	; 9
     2ae:	08 95       	ret

000002b0 <UART_sendByte>:
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     2b0:	5d 9b       	sbis	0x0b, 5	; 11
     2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <UART_sendByte>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     2b4:	8c b9       	out	0x0c, r24	; 12
     2b6:	08 95       	ret

000002b8 <UART_recieveByte>:
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     2b8:	5f 9b       	sbis	0x0b, 7	; 11
     2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <UART_recieveByte>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     2bc:	8c b1       	in	r24, 0x0c	; 12
}
     2be:	08 95       	ret

000002c0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	8c 01       	movw	r16, r24
	uint8 i = 0;
     2c8:	c0 e0       	ldi	r28, 0x00	; 0

	/* Send the whole string */
	while(Str[i] != '\0')
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <UART_sendString+0x12>
	{
		UART_sendByte(Str[i]);
     2cc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <UART_sendByte>
		i++;
     2d0:	cf 5f       	subi	r28, 0xFF	; 255
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     2d2:	f8 01       	movw	r30, r16
     2d4:	ec 0f       	add	r30, r28
     2d6:	f1 1d       	adc	r31, r1
     2d8:	80 81       	ld	r24, Z
     2da:	81 11       	cpse	r24, r1
     2dc:	f7 cf       	rjmp	.-18     	; 0x2cc <UART_sendString+0xc>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
uint8 * UART_receiveString(uint8 *Str)
{
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	8c 01       	movw	r16, r24
	uint8 i = 0;

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     2f2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <UART_recieveByte>
     2f6:	f8 01       	movw	r30, r16
     2f8:	80 83       	st	Z, r24
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
uint8 * UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
     2fa:	c0 e0       	ldi	r28, 0x00	; 0

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     2fc:	08 c0       	rjmp	.+16     	; 0x30e <UART_receiveString+0x28>
	{
		i++;
     2fe:	cf 5f       	subi	r28, 0xFF	; 255
		Str[i] = UART_recieveByte();
     300:	78 01       	movw	r14, r16
     302:	ec 0e       	add	r14, r28
     304:	f1 1c       	adc	r15, r1
     306:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <UART_recieveByte>
     30a:	f7 01       	movw	r30, r14
     30c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     30e:	f8 01       	movw	r30, r16
     310:	ec 0f       	add	r30, r28
     312:	f1 1d       	adc	r31, r1
     314:	80 81       	ld	r24, Z
     316:	83 32       	cpi	r24, 0x23	; 35
     318:	91 f7       	brne	.-28     	; 0x2fe <UART_receiveString+0x18>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\r';
     31a:	8d e0       	ldi	r24, 0x0D	; 13
     31c:	80 83       	st	Z, r24
	return Str;
}
     31e:	c8 01       	movw	r24, r16
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	08 95       	ret

0000032c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     32c:	fc 01       	movw	r30, r24
     32e:	03 96       	adiw	r24, 0x03	; 3
     330:	92 83       	std	Z+2, r25	; 0x02
     332:	81 83       	std	Z+1, r24	; 0x01
     334:	2f ef       	ldi	r18, 0xFF	; 255
     336:	3f ef       	ldi	r19, 0xFF	; 255
     338:	34 83       	std	Z+4, r19	; 0x04
     33a:	23 83       	std	Z+3, r18	; 0x03
     33c:	96 83       	std	Z+6, r25	; 0x06
     33e:	85 83       	std	Z+5, r24	; 0x05
     340:	90 87       	std	Z+8, r25	; 0x08
     342:	87 83       	std	Z+7, r24	; 0x07
     344:	10 82       	st	Z, r1
     346:	08 95       	ret

00000348 <vListInitialiseItem>:
     348:	fc 01       	movw	r30, r24
     34a:	11 86       	std	Z+9, r1	; 0x09
     34c:	10 86       	std	Z+8, r1	; 0x08
     34e:	08 95       	ret

00000350 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     356:	48 81       	ld	r20, Y
     358:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     35a:	4f 3f       	cpi	r20, 0xFF	; 255
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	52 07       	cpc	r21, r18
     360:	21 f4       	brne	.+8      	; 0x36a <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     362:	fc 01       	movw	r30, r24
     364:	a7 81       	ldd	r26, Z+7	; 0x07
     366:	b0 85       	ldd	r27, Z+8	; 0x08
     368:	0d c0       	rjmp	.+26     	; 0x384 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     36a:	dc 01       	movw	r26, r24
     36c:	13 96       	adiw	r26, 0x03	; 3
     36e:	01 c0       	rjmp	.+2      	; 0x372 <vListInsert+0x22>
     370:	df 01       	movw	r26, r30
     372:	12 96       	adiw	r26, 0x02	; 2
     374:	ed 91       	ld	r30, X+
     376:	fc 91       	ld	r31, X
     378:	13 97       	sbiw	r26, 0x03	; 3
     37a:	20 81       	ld	r18, Z
     37c:	31 81       	ldd	r19, Z+1	; 0x01
     37e:	42 17       	cp	r20, r18
     380:	53 07       	cpc	r21, r19
     382:	b0 f7       	brcc	.-20     	; 0x370 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     384:	12 96       	adiw	r26, 0x02	; 2
     386:	ed 91       	ld	r30, X+
     388:	fc 91       	ld	r31, X
     38a:	13 97       	sbiw	r26, 0x03	; 3
     38c:	fb 83       	std	Y+3, r31	; 0x03
     38e:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     390:	d5 83       	std	Z+5, r29	; 0x05
     392:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     394:	bd 83       	std	Y+5, r27	; 0x05
     396:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     398:	13 96       	adiw	r26, 0x03	; 3
     39a:	dc 93       	st	X, r29
     39c:	ce 93       	st	-X, r28
     39e:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     3a0:	99 87       	std	Y+9, r25	; 0x09
     3a2:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 81       	ld	r18, Z
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
     3aa:	20 83       	st	Z, r18
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     3b8:	a0 85       	ldd	r26, Z+8	; 0x08
     3ba:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3bc:	c2 81       	ldd	r28, Z+2	; 0x02
     3be:	d3 81       	ldd	r29, Z+3	; 0x03
     3c0:	84 81       	ldd	r24, Z+4	; 0x04
     3c2:	95 81       	ldd	r25, Z+5	; 0x05
     3c4:	9d 83       	std	Y+5, r25	; 0x05
     3c6:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3c8:	c4 81       	ldd	r28, Z+4	; 0x04
     3ca:	d5 81       	ldd	r29, Z+5	; 0x05
     3cc:	82 81       	ldd	r24, Z+2	; 0x02
     3ce:	93 81       	ldd	r25, Z+3	; 0x03
     3d0:	9b 83       	std	Y+3, r25	; 0x03
     3d2:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     3d4:	11 96       	adiw	r26, 0x01	; 1
     3d6:	8d 91       	ld	r24, X+
     3d8:	9c 91       	ld	r25, X
     3da:	12 97       	sbiw	r26, 0x02	; 2
     3dc:	e8 17       	cp	r30, r24
     3de:	f9 07       	cpc	r31, r25
     3e0:	31 f4       	brne	.+12     	; 0x3ee <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     3e2:	84 81       	ldd	r24, Z+4	; 0x04
     3e4:	95 81       	ldd	r25, Z+5	; 0x05
     3e6:	12 96       	adiw	r26, 0x02	; 2
     3e8:	9c 93       	st	X, r25
     3ea:	8e 93       	st	-X, r24
     3ec:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     3ee:	11 86       	std	Z+9, r1	; 0x09
     3f0:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     3f2:	8c 91       	ld	r24, X
     3f4:	81 50       	subi	r24, 0x01	; 1
     3f6:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     3f8:	8c 91       	ld	r24, X
}
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	08 95       	ret

00000400 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     400:	1b bc       	out	0x2b, r1	; 43
     402:	8c e7       	ldi	r24, 0x7C	; 124
     404:	8a bd       	out	0x2a, r24	; 42
     406:	8b e0       	ldi	r24, 0x0B	; 11
     408:	8e bd       	out	0x2e, r24	; 46
     40a:	89 b7       	in	r24, 0x39	; 57
     40c:	80 61       	ori	r24, 0x10	; 16
     40e:	89 bf       	out	0x39, r24	; 57
     410:	08 95       	ret

00000412 <pxPortInitialiseStack>:
     412:	31 e1       	ldi	r19, 0x11	; 17
     414:	fc 01       	movw	r30, r24
     416:	30 83       	st	Z, r19
     418:	31 97       	sbiw	r30, 0x01	; 1
     41a:	22 e2       	ldi	r18, 0x22	; 34
     41c:	20 83       	st	Z, r18
     41e:	31 97       	sbiw	r30, 0x01	; 1
     420:	a3 e3       	ldi	r26, 0x33	; 51
     422:	a0 83       	st	Z, r26
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	60 83       	st	Z, r22
     428:	31 97       	sbiw	r30, 0x01	; 1
     42a:	70 83       	st	Z, r23
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	10 82       	st	Z, r1
     430:	31 97       	sbiw	r30, 0x01	; 1
     432:	60 e8       	ldi	r22, 0x80	; 128
     434:	60 83       	st	Z, r22
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	10 82       	st	Z, r1
     43a:	31 97       	sbiw	r30, 0x01	; 1
     43c:	62 e0       	ldi	r22, 0x02	; 2
     43e:	60 83       	st	Z, r22
     440:	31 97       	sbiw	r30, 0x01	; 1
     442:	63 e0       	ldi	r22, 0x03	; 3
     444:	60 83       	st	Z, r22
     446:	31 97       	sbiw	r30, 0x01	; 1
     448:	64 e0       	ldi	r22, 0x04	; 4
     44a:	60 83       	st	Z, r22
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	65 e0       	ldi	r22, 0x05	; 5
     450:	60 83       	st	Z, r22
     452:	31 97       	sbiw	r30, 0x01	; 1
     454:	66 e0       	ldi	r22, 0x06	; 6
     456:	60 83       	st	Z, r22
     458:	31 97       	sbiw	r30, 0x01	; 1
     45a:	67 e0       	ldi	r22, 0x07	; 7
     45c:	60 83       	st	Z, r22
     45e:	31 97       	sbiw	r30, 0x01	; 1
     460:	68 e0       	ldi	r22, 0x08	; 8
     462:	60 83       	st	Z, r22
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	69 e0       	ldi	r22, 0x09	; 9
     468:	60 83       	st	Z, r22
     46a:	31 97       	sbiw	r30, 0x01	; 1
     46c:	60 e1       	ldi	r22, 0x10	; 16
     46e:	60 83       	st	Z, r22
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	30 83       	st	Z, r19
     474:	31 97       	sbiw	r30, 0x01	; 1
     476:	32 e1       	ldi	r19, 0x12	; 18
     478:	30 83       	st	Z, r19
     47a:	31 97       	sbiw	r30, 0x01	; 1
     47c:	33 e1       	ldi	r19, 0x13	; 19
     47e:	30 83       	st	Z, r19
     480:	31 97       	sbiw	r30, 0x01	; 1
     482:	34 e1       	ldi	r19, 0x14	; 20
     484:	30 83       	st	Z, r19
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	35 e1       	ldi	r19, 0x15	; 21
     48a:	30 83       	st	Z, r19
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	36 e1       	ldi	r19, 0x16	; 22
     490:	30 83       	st	Z, r19
     492:	31 97       	sbiw	r30, 0x01	; 1
     494:	37 e1       	ldi	r19, 0x17	; 23
     496:	30 83       	st	Z, r19
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	38 e1       	ldi	r19, 0x18	; 24
     49c:	30 83       	st	Z, r19
     49e:	31 97       	sbiw	r30, 0x01	; 1
     4a0:	39 e1       	ldi	r19, 0x19	; 25
     4a2:	30 83       	st	Z, r19
     4a4:	31 97       	sbiw	r30, 0x01	; 1
     4a6:	30 e2       	ldi	r19, 0x20	; 32
     4a8:	30 83       	st	Z, r19
     4aa:	31 97       	sbiw	r30, 0x01	; 1
     4ac:	31 e2       	ldi	r19, 0x21	; 33
     4ae:	30 83       	st	Z, r19
     4b0:	31 97       	sbiw	r30, 0x01	; 1
     4b2:	20 83       	st	Z, r18
     4b4:	31 97       	sbiw	r30, 0x01	; 1
     4b6:	23 e2       	ldi	r18, 0x23	; 35
     4b8:	20 83       	st	Z, r18
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	40 83       	st	Z, r20
     4be:	31 97       	sbiw	r30, 0x01	; 1
     4c0:	50 83       	st	Z, r21
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	26 e2       	ldi	r18, 0x26	; 38
     4c6:	20 83       	st	Z, r18
     4c8:	31 97       	sbiw	r30, 0x01	; 1
     4ca:	27 e2       	ldi	r18, 0x27	; 39
     4cc:	20 83       	st	Z, r18
     4ce:	31 97       	sbiw	r30, 0x01	; 1
     4d0:	28 e2       	ldi	r18, 0x28	; 40
     4d2:	20 83       	st	Z, r18
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	29 e2       	ldi	r18, 0x29	; 41
     4d8:	20 83       	st	Z, r18
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	20 e3       	ldi	r18, 0x30	; 48
     4de:	20 83       	st	Z, r18
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	21 e3       	ldi	r18, 0x31	; 49
     4e4:	20 83       	st	Z, r18
     4e6:	86 97       	sbiw	r24, 0x26	; 38
     4e8:	08 95       	ret

000004ea <xPortStartScheduler>:
     4ea:	0e 94 00 02 	call	0x400	; 0x400 <prvSetupTimerInterrupt>
     4ee:	a0 91 d0 06 	lds	r26, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     4f2:	b0 91 d1 06 	lds	r27, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     4f6:	cd 91       	ld	r28, X+
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	dd 91       	ld	r29, X+
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	7f 91       	pop	r23
     510:	6f 91       	pop	r22
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	bf 90       	pop	r11
     528:	af 90       	pop	r10
     52a:	9f 90       	pop	r9
     52c:	8f 90       	pop	r8
     52e:	7f 90       	pop	r7
     530:	6f 90       	pop	r6
     532:	5f 90       	pop	r5
     534:	4f 90       	pop	r4
     536:	3f 90       	pop	r3
     538:	2f 90       	pop	r2
     53a:	1f 90       	pop	r1
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	08 95       	ret
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret

00000548 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     548:	0f 92       	push	r0
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	0f 92       	push	r0
     550:	1f 92       	push	r1
     552:	11 24       	eor	r1, r1
     554:	2f 92       	push	r2
     556:	3f 92       	push	r3
     558:	4f 92       	push	r4
     55a:	5f 92       	push	r5
     55c:	6f 92       	push	r6
     55e:	7f 92       	push	r7
     560:	8f 92       	push	r8
     562:	9f 92       	push	r9
     564:	af 92       	push	r10
     566:	bf 92       	push	r11
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	2f 93       	push	r18
     576:	3f 93       	push	r19
     578:	4f 93       	push	r20
     57a:	5f 93       	push	r21
     57c:	6f 93       	push	r22
     57e:	7f 93       	push	r23
     580:	8f 93       	push	r24
     582:	9f 93       	push	r25
     584:	af 93       	push	r26
     586:	bf 93       	push	r27
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
     590:	a0 91 d0 06 	lds	r26, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     594:	b0 91 d1 06 	lds	r27, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     598:	0d b6       	in	r0, 0x3d	; 61
     59a:	0d 92       	st	X+, r0
     59c:	0e b6       	in	r0, 0x3e	; 62
     59e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     5a0:	0e 94 38 08 	call	0x1070	; 0x1070 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     5a4:	a0 91 d0 06 	lds	r26, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     5a8:	b0 91 d1 06 	lds	r27, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     5ac:	cd 91       	ld	r28, X+
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	dd 91       	ld	r29, X+
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	ff 91       	pop	r31
     5b6:	ef 91       	pop	r30
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	df 90       	pop	r13
     5da:	cf 90       	pop	r12
     5dc:	bf 90       	pop	r11
     5de:	af 90       	pop	r10
     5e0:	9f 90       	pop	r9
     5e2:	8f 90       	pop	r8
     5e4:	7f 90       	pop	r7
     5e6:	6f 90       	pop	r6
     5e8:	5f 90       	pop	r5
     5ea:	4f 90       	pop	r4
     5ec:	3f 90       	pop	r3
     5ee:	2f 90       	pop	r2
     5f0:	1f 90       	pop	r1
     5f2:	0f 90       	pop	r0
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	0f 90       	pop	r0

	asm volatile ( "ret" );
     5f8:	08 95       	ret

000005fa <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	0f 92       	push	r0
     602:	1f 92       	push	r1
     604:	11 24       	eor	r1, r1
     606:	2f 92       	push	r2
     608:	3f 92       	push	r3
     60a:	4f 92       	push	r4
     60c:	5f 92       	push	r5
     60e:	6f 92       	push	r6
     610:	7f 92       	push	r7
     612:	8f 92       	push	r8
     614:	9f 92       	push	r9
     616:	af 92       	push	r10
     618:	bf 92       	push	r11
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	ef 93       	push	r30
     640:	ff 93       	push	r31
     642:	a0 91 d0 06 	lds	r26, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     646:	b0 91 d1 06 	lds	r27, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     64a:	0d b6       	in	r0, 0x3d	; 61
     64c:	0d 92       	st	X+, r0
     64e:	0e b6       	in	r0, 0x3e	; 62
     650:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     652:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <xTaskIncrementTick>
     656:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     658:	0e 94 38 08 	call	0x1070	; 0x1070 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     65c:	a0 91 d0 06 	lds	r26, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     660:	b0 91 d1 06 	lds	r27, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     664:	cd 91       	ld	r28, X+
     666:	cd bf       	out	0x3d, r28	; 61
     668:	dd 91       	ld	r29, X+
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	ff 91       	pop	r31
     66e:	ef 91       	pop	r30
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	bf 91       	pop	r27
     676:	af 91       	pop	r26
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	7f 91       	pop	r23
     67e:	6f 91       	pop	r22
     680:	5f 91       	pop	r21
     682:	4f 91       	pop	r20
     684:	3f 91       	pop	r19
     686:	2f 91       	pop	r18
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	af 90       	pop	r10
     698:	9f 90       	pop	r9
     69a:	8f 90       	pop	r8
     69c:	7f 90       	pop	r7
     69e:	6f 90       	pop	r6
     6a0:	5f 90       	pop	r5
     6a2:	4f 90       	pop	r4
     6a4:	3f 90       	pop	r3
     6a6:	2f 90       	pop	r2
     6a8:	1f 90       	pop	r1
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0

	asm volatile ( "ret" );
     6b0:	08 95       	ret

000006b2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     6b2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <vPortYieldFromTick>
		asm volatile ( "reti" );
     6b6:	18 95       	reti

000006b8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
     6be:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     6c2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
     6c6:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
     6ca:	89 2b       	or	r24, r25
     6cc:	31 f4       	brne	.+12     	; 0x6da <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     6ce:	88 e9       	ldi	r24, 0x98	; 152
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__data_end+0x1>
     6d6:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     6da:	20 97       	sbiw	r28, 0x00	; 0
     6dc:	c9 f0       	breq	.+50     	; 0x710 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     6de:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <xNextFreeByte>
     6e2:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <xNextFreeByte+0x1>
     6e6:	9e 01       	movw	r18, r28
     6e8:	28 0f       	add	r18, r24
     6ea:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     6ec:	2b 3d       	cpi	r18, 0xDB	; 219
     6ee:	45 e0       	ldi	r20, 0x05	; 5
     6f0:	34 07       	cpc	r19, r20
     6f2:	88 f4       	brcc	.+34     	; 0x716 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     6f4:	82 17       	cp	r24, r18
     6f6:	93 07       	cpc	r25, r19
     6f8:	88 f4       	brcc	.+34     	; 0x71c <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     6fa:	c0 91 94 00 	lds	r28, 0x0094	; 0x800094 <__data_end>
     6fe:	d0 91 95 00 	lds	r29, 0x0095	; 0x800095 <__data_end+0x1>
     702:	c8 0f       	add	r28, r24
     704:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     706:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <xNextFreeByte+0x1>
     70a:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <xNextFreeByte>
     70e:	08 c0       	rjmp	.+16     	; 0x720 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     710:	c0 e0       	ldi	r28, 0x00	; 0
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	05 c0       	rjmp	.+10     	; 0x720 <pvPortMalloc+0x68>
     716:	c0 e0       	ldi	r28, 0x00	; 0
     718:	d0 e0       	ldi	r29, 0x00	; 0
     71a:	02 c0       	rjmp	.+4      	; 0x720 <pvPortMalloc+0x68>
     71c:	c0 e0       	ldi	r28, 0x00	; 0
     71e:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     720:	0e 94 0b 07 	call	0xe16	; 0xe16 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     724:	ce 01       	movw	r24, r28
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     72c:	08 95       	ret

0000072e <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     72e:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <pxDelayedTaskList>
     732:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
     736:	80 81       	ld	r24, Z
     738:	81 11       	cpse	r24, r1
     73a:	07 c0       	rjmp	.+14     	; 0x74a <prvResetNextTaskUnblockTime+0x1c>
     73c:	8f ef       	ldi	r24, 0xFF	; 255
     73e:	9f ef       	ldi	r25, 0xFF	; 255
     740:	90 93 78 06 	sts	0x0678, r25	; 0x800678 <xNextTaskUnblockTime+0x1>
     744:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <xNextTaskUnblockTime>
     748:	08 95       	ret
     74a:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <pxDelayedTaskList>
     74e:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
     752:	05 80       	ldd	r0, Z+5	; 0x05
     754:	f6 81       	ldd	r31, Z+6	; 0x06
     756:	e0 2d       	mov	r30, r0
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	90 93 78 06 	sts	0x0678, r25	; 0x800678 <xNextTaskUnblockTime+0x1>
     760:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <xNextTaskUnblockTime>
     764:	08 95       	ret

00000766 <prvDeleteTCB>:
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	ec 01       	movw	r28, r24
     76c:	8f 89       	ldd	r24, Y+23	; 0x17
     76e:	98 8d       	ldd	r25, Y+24	; 0x18
     770:	0e 94 96 03 	call	0x72c	; 0x72c <vPortFree>
     774:	ce 01       	movw	r24, r28
     776:	0e 94 96 03 	call	0x72c	; 0x72c <vPortFree>
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <prvInitialiseNewTask>:
     780:	6f 92       	push	r6
     782:	7f 92       	push	r7
     784:	8f 92       	push	r8
     786:	9f 92       	push	r9
     788:	af 92       	push	r10
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	4c 01       	movw	r8, r24
     7a0:	d5 01       	movw	r26, r10
     7a2:	57 96       	adiw	r26, 0x17	; 23
     7a4:	8d 91       	ld	r24, X+
     7a6:	9c 91       	ld	r25, X
     7a8:	58 97       	sbiw	r26, 0x18	; 24
     7aa:	21 50       	subi	r18, 0x01	; 1
     7ac:	31 09       	sbc	r19, r1
     7ae:	3c 01       	movw	r6, r24
     7b0:	62 0e       	add	r6, r18
     7b2:	73 1e       	adc	r7, r19
     7b4:	61 15       	cp	r22, r1
     7b6:	71 05       	cpc	r23, r1
     7b8:	89 f4       	brne	.+34     	; 0x7dc <prvInitialiseNewTask+0x5c>
     7ba:	16 c0       	rjmp	.+44     	; 0x7e8 <prvInitialiseNewTask+0x68>
     7bc:	82 2f       	mov	r24, r18
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	fb 01       	movw	r30, r22
     7c2:	e8 0f       	add	r30, r24
     7c4:	f9 1f       	adc	r31, r25
     7c6:	30 81       	ld	r19, Z
     7c8:	d5 01       	movw	r26, r10
     7ca:	a8 0f       	add	r26, r24
     7cc:	b9 1f       	adc	r27, r25
     7ce:	59 96       	adiw	r26, 0x19	; 25
     7d0:	3c 93       	st	X, r19
     7d2:	80 81       	ld	r24, Z
     7d4:	88 23       	and	r24, r24
     7d6:	29 f0       	breq	.+10     	; 0x7e2 <prvInitialiseNewTask+0x62>
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
     7da:	01 c0       	rjmp	.+2      	; 0x7de <prvInitialiseNewTask+0x5e>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	28 30       	cpi	r18, 0x08	; 8
     7e0:	68 f3       	brcs	.-38     	; 0x7bc <prvInitialiseNewTask+0x3c>
     7e2:	f5 01       	movw	r30, r10
     7e4:	10 a2       	std	Z+32, r1	; 0x20
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <prvInitialiseNewTask+0x6e>
     7e8:	d5 01       	movw	r26, r10
     7ea:	59 96       	adiw	r26, 0x19	; 25
     7ec:	1c 92       	st	X, r1
     7ee:	b3 e0       	ldi	r27, 0x03	; 3
     7f0:	be 15       	cp	r27, r14
     7f2:	20 f4       	brcc	.+8      	; 0x7fc <prvInitialiseNewTask+0x7c>
     7f4:	0f 2e       	mov	r0, r31
     7f6:	f3 e0       	ldi	r31, 0x03	; 3
     7f8:	ef 2e       	mov	r14, r31
     7fa:	f0 2d       	mov	r31, r0
     7fc:	f5 01       	movw	r30, r10
     7fe:	e6 8a       	std	Z+22, r14	; 0x16
     800:	c5 01       	movw	r24, r10
     802:	02 96       	adiw	r24, 0x02	; 2
     804:	0e 94 a4 01 	call	0x348	; 0x348 <vListInitialiseItem>
     808:	c5 01       	movw	r24, r10
     80a:	0c 96       	adiw	r24, 0x0c	; 12
     80c:	0e 94 a4 01 	call	0x348	; 0x348 <vListInitialiseItem>
     810:	d5 01       	movw	r26, r10
     812:	19 96       	adiw	r26, 0x09	; 9
     814:	bc 92       	st	X, r11
     816:	ae 92       	st	-X, r10
     818:	18 97       	sbiw	r26, 0x08	; 8
     81a:	84 e0       	ldi	r24, 0x04	; 4
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	8e 19       	sub	r24, r14
     820:	91 09       	sbc	r25, r1
     822:	1d 96       	adiw	r26, 0x0d	; 13
     824:	9c 93       	st	X, r25
     826:	8e 93       	st	-X, r24
     828:	1c 97       	sbiw	r26, 0x0c	; 12
     82a:	53 96       	adiw	r26, 0x13	; 19
     82c:	bc 92       	st	X, r11
     82e:	ae 92       	st	-X, r10
     830:	52 97       	sbiw	r26, 0x12	; 18
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	f5 01       	movw	r30, r10
     836:	b1 96       	adiw	r30, 0x21	; 33
     838:	df 01       	movw	r26, r30
     83a:	1d 92       	st	X+, r1
     83c:	8a 95       	dec	r24
     83e:	e9 f7       	brne	.-6      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     840:	f5 01       	movw	r30, r10
     842:	15 a2       	std	Z+37, r1	; 0x25
     844:	a8 01       	movw	r20, r16
     846:	b4 01       	movw	r22, r8
     848:	c3 01       	movw	r24, r6
     84a:	0e 94 09 02 	call	0x412	; 0x412 <pxPortInitialiseStack>
     84e:	d5 01       	movw	r26, r10
     850:	8d 93       	st	X+, r24
     852:	9c 93       	st	X, r25
     854:	c1 14       	cp	r12, r1
     856:	d1 04       	cpc	r13, r1
     858:	19 f0       	breq	.+6      	; 0x860 <__stack+0x1>
     85a:	f6 01       	movw	r30, r12
     85c:	b1 82       	std	Z+1, r11	; 0x01
     85e:	a0 82       	st	Z, r10
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	af 90       	pop	r10
     872:	9f 90       	pop	r9
     874:	8f 90       	pop	r8
     876:	7f 90       	pop	r7
     878:	6f 90       	pop	r6
     87a:	08 95       	ret

0000087c <prvInitialiseTaskLists>:
     87c:	cf 93       	push	r28
     87e:	c0 e0       	ldi	r28, 0x00	; 0
     880:	10 c0       	rjmp	.+32     	; 0x8a2 <prvInitialiseTaskLists+0x26>
     882:	8c 2f       	mov	r24, r28
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	9c 01       	movw	r18, r24
     888:	22 0f       	add	r18, r18
     88a:	33 1f       	adc	r19, r19
     88c:	22 0f       	add	r18, r18
     88e:	33 1f       	adc	r19, r19
     890:	22 0f       	add	r18, r18
     892:	33 1f       	adc	r19, r19
     894:	82 0f       	add	r24, r18
     896:	93 1f       	adc	r25, r19
     898:	84 55       	subi	r24, 0x54	; 84
     89a:	99 4f       	sbci	r25, 0xF9	; 249
     89c:	0e 94 96 01 	call	0x32c	; 0x32c <vListInitialise>
     8a0:	cf 5f       	subi	r28, 0xFF	; 255
     8a2:	c4 30       	cpi	r28, 0x04	; 4
     8a4:	70 f3       	brcs	.-36     	; 0x882 <prvInitialiseTaskLists+0x6>
     8a6:	83 ea       	ldi	r24, 0xA3	; 163
     8a8:	96 e0       	ldi	r25, 0x06	; 6
     8aa:	0e 94 96 01 	call	0x32c	; 0x32c <vListInitialise>
     8ae:	8a e9       	ldi	r24, 0x9A	; 154
     8b0:	96 e0       	ldi	r25, 0x06	; 6
     8b2:	0e 94 96 01 	call	0x32c	; 0x32c <vListInitialise>
     8b6:	8d e8       	ldi	r24, 0x8D	; 141
     8b8:	96 e0       	ldi	r25, 0x06	; 6
     8ba:	0e 94 96 01 	call	0x32c	; 0x32c <vListInitialise>
     8be:	84 e8       	ldi	r24, 0x84	; 132
     8c0:	96 e0       	ldi	r25, 0x06	; 6
     8c2:	0e 94 96 01 	call	0x32c	; 0x32c <vListInitialise>
     8c6:	83 ea       	ldi	r24, 0xA3	; 163
     8c8:	96 e0       	ldi	r25, 0x06	; 6
     8ca:	90 93 99 06 	sts	0x0699, r25	; 0x800699 <pxDelayedTaskList+0x1>
     8ce:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pxDelayedTaskList>
     8d2:	8a e9       	ldi	r24, 0x9A	; 154
     8d4:	96 e0       	ldi	r25, 0x06	; 6
     8d6:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <pxOverflowDelayedTaskList+0x1>
     8da:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <pxOverflowDelayedTaskList>
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <prvAddNewTaskToReadyList>:
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	0f 92       	push	r0
     8ee:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxCurrentNumberOfTasks>
     8f2:	8f 5f       	subi	r24, 0xFF	; 255
     8f4:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxCurrentNumberOfTasks>
     8f8:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     8fc:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     900:	89 2b       	or	r24, r25
     902:	59 f4       	brne	.+22     	; 0x91a <prvAddNewTaskToReadyList+0x38>
     904:	d0 93 d1 06 	sts	0x06D1, r29	; 0x8006d1 <pxCurrentTCB+0x1>
     908:	c0 93 d0 06 	sts	0x06D0, r28	; 0x8006d0 <pxCurrentTCB>
     90c:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxCurrentNumberOfTasks>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	99 f4       	brne	.+38     	; 0x93a <prvAddNewTaskToReadyList+0x58>
     914:	0e 94 3e 04 	call	0x87c	; 0x87c <prvInitialiseTaskLists>
     918:	10 c0       	rjmp	.+32     	; 0x93a <prvAddNewTaskToReadyList+0x58>
     91a:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <xSchedulerRunning>
     91e:	81 11       	cpse	r24, r1
     920:	0c c0       	rjmp	.+24     	; 0x93a <prvAddNewTaskToReadyList+0x58>
     922:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     926:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     92a:	96 89       	ldd	r25, Z+22	; 0x16
     92c:	8e 89       	ldd	r24, Y+22	; 0x16
     92e:	89 17       	cp	r24, r25
     930:	20 f0       	brcs	.+8      	; 0x93a <prvAddNewTaskToReadyList+0x58>
     932:	d0 93 d1 06 	sts	0x06D1, r29	; 0x8006d1 <pxCurrentTCB+0x1>
     936:	c0 93 d0 06 	sts	0x06D0, r28	; 0x8006d0 <pxCurrentTCB>
     93a:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <uxTaskNumber>
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <uxTaskNumber>
     944:	8e 89       	ldd	r24, Y+22	; 0x16
     946:	90 91 7f 06 	lds	r25, 0x067F	; 0x80067f <uxTopReadyPriority>
     94a:	98 17       	cp	r25, r24
     94c:	10 f4       	brcc	.+4      	; 0x952 <prvAddNewTaskToReadyList+0x70>
     94e:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <uxTopReadyPriority>
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	fc 01       	movw	r30, r24
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	ee 0f       	add	r30, r30
     960:	ff 1f       	adc	r31, r31
     962:	8e 0f       	add	r24, r30
     964:	9f 1f       	adc	r25, r31
     966:	fc 01       	movw	r30, r24
     968:	e4 55       	subi	r30, 0x54	; 84
     96a:	f9 4f       	sbci	r31, 0xF9	; 249
     96c:	01 80       	ldd	r0, Z+1	; 0x01
     96e:	f2 81       	ldd	r31, Z+2	; 0x02
     970:	e0 2d       	mov	r30, r0
     972:	fd 83       	std	Y+5, r31	; 0x05
     974:	ec 83       	std	Y+4, r30	; 0x04
     976:	84 81       	ldd	r24, Z+4	; 0x04
     978:	95 81       	ldd	r25, Z+5	; 0x05
     97a:	9f 83       	std	Y+7, r25	; 0x07
     97c:	8e 83       	std	Y+6, r24	; 0x06
     97e:	a4 81       	ldd	r26, Z+4	; 0x04
     980:	b5 81       	ldd	r27, Z+5	; 0x05
     982:	ce 01       	movw	r24, r28
     984:	02 96       	adiw	r24, 0x02	; 2
     986:	13 96       	adiw	r26, 0x03	; 3
     988:	9c 93       	st	X, r25
     98a:	8e 93       	st	-X, r24
     98c:	12 97       	sbiw	r26, 0x02	; 2
     98e:	95 83       	std	Z+5, r25	; 0x05
     990:	84 83       	std	Z+4, r24	; 0x04
     992:	ee 89       	ldd	r30, Y+22	; 0x16
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	cf 01       	movw	r24, r30
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	e8 0f       	add	r30, r24
     9a6:	f9 1f       	adc	r31, r25
     9a8:	e4 55       	subi	r30, 0x54	; 84
     9aa:	f9 4f       	sbci	r31, 0xF9	; 249
     9ac:	fb 87       	std	Y+11, r31	; 0x0b
     9ae:	ea 87       	std	Y+10, r30	; 0x0a
     9b0:	80 81       	ld	r24, Z
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	80 83       	st	Z, r24
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <xSchedulerRunning>
     9be:	88 23       	and	r24, r24
     9c0:	51 f0       	breq	.+20     	; 0x9d6 <prvAddNewTaskToReadyList+0xf4>
     9c2:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     9c6:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     9ca:	96 89       	ldd	r25, Z+22	; 0x16
     9cc:	8e 89       	ldd	r24, Y+22	; 0x16
     9ce:	98 17       	cp	r25, r24
     9d0:	10 f4       	brcc	.+4      	; 0x9d6 <prvAddNewTaskToReadyList+0xf4>
     9d2:	0e 94 a4 02 	call	0x548	; 0x548 <vPortYield>
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <prvCheckTasksWaitingTermination>:
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	1c c0       	rjmp	.+56     	; 0xa1a <prvCheckTasksWaitingTermination+0x3e>
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	0f 92       	push	r0
     9e8:	e0 91 89 06 	lds	r30, 0x0689	; 0x800689 <xTasksWaitingTermination+0x5>
     9ec:	f0 91 8a 06 	lds	r31, 0x068A	; 0x80068a <xTasksWaitingTermination+0x6>
     9f0:	c6 81       	ldd	r28, Z+6	; 0x06
     9f2:	d7 81       	ldd	r29, Z+7	; 0x07
     9f4:	ce 01       	movw	r24, r28
     9f6:	02 96       	adiw	r24, 0x02	; 2
     9f8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <uxListRemove>
     9fc:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxCurrentNumberOfTasks>
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <uxCurrentNumberOfTasks>
     a06:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <uxDeletedTasksWaitingCleanUp>
     a0a:	81 50       	subi	r24, 0x01	; 1
     a0c:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <uxDeletedTasksWaitingCleanUp>
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	ce 01       	movw	r24, r28
     a16:	0e 94 b3 03 	call	0x766	; 0x766 <prvDeleteTCB>
     a1a:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <uxDeletedTasksWaitingCleanUp>
     a1e:	81 11       	cpse	r24, r1
     a20:	e0 cf       	rjmp	.-64     	; 0x9e2 <prvCheckTasksWaitingTermination+0x6>
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <prvIdleTask>:
     a28:	0e 94 ee 04 	call	0x9dc	; 0x9dc <prvCheckTasksWaitingTermination>
     a2c:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxReadyTasksLists>
     a30:	82 30       	cpi	r24, 0x02	; 2
     a32:	d0 f3       	brcs	.-12     	; 0xa28 <prvIdleTask>
     a34:	0e 94 a4 02 	call	0x548	; 0x548 <vPortYield>
     a38:	f7 cf       	rjmp	.-18     	; 0xa28 <prvIdleTask>

00000a3a <prvAddCurrentTaskToDelayedList>:
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	ec 01       	movw	r28, r24
     a44:	00 91 80 06 	lds	r16, 0x0680	; 0x800680 <xTickCount>
     a48:	10 91 81 06 	lds	r17, 0x0681	; 0x800681 <xTickCount+0x1>
     a4c:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     a50:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     a54:	02 96       	adiw	r24, 0x02	; 2
     a56:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <uxListRemove>
     a5a:	c0 0f       	add	r28, r16
     a5c:	d1 1f       	adc	r29, r17
     a5e:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     a62:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     a66:	d3 83       	std	Z+3, r29	; 0x03
     a68:	c2 83       	std	Z+2, r28	; 0x02
     a6a:	c0 17       	cp	r28, r16
     a6c:	d1 07       	cpc	r29, r17
     a6e:	68 f4       	brcc	.+26     	; 0xa8a <prvAddCurrentTaskToDelayedList+0x50>
     a70:	60 91 d0 06 	lds	r22, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     a74:	70 91 d1 06 	lds	r23, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     a78:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxOverflowDelayedTaskList>
     a7c:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <pxOverflowDelayedTaskList+0x1>
     a80:	6e 5f       	subi	r22, 0xFE	; 254
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	0e 94 a8 01 	call	0x350	; 0x350 <vListInsert>
     a88:	17 c0       	rjmp	.+46     	; 0xab8 <prvAddCurrentTaskToDelayedList+0x7e>
     a8a:	60 91 d0 06 	lds	r22, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     a8e:	70 91 d1 06 	lds	r23, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     a92:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pxDelayedTaskList>
     a96:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
     a9a:	6e 5f       	subi	r22, 0xFE	; 254
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	0e 94 a8 01 	call	0x350	; 0x350 <vListInsert>
     aa2:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xNextTaskUnblockTime>
     aa6:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <xNextTaskUnblockTime+0x1>
     aaa:	c8 17       	cp	r28, r24
     aac:	d9 07       	cpc	r29, r25
     aae:	20 f4       	brcc	.+8      	; 0xab8 <prvAddCurrentTaskToDelayedList+0x7e>
     ab0:	d0 93 78 06 	sts	0x0678, r29	; 0x800678 <xNextTaskUnblockTime+0x1>
     ab4:	c0 93 77 06 	sts	0x0677, r28	; 0x800677 <xNextTaskUnblockTime>
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <xTaskCreate>:
     ac2:	2f 92       	push	r2
     ac4:	3f 92       	push	r3
     ac6:	4f 92       	push	r4
     ac8:	5f 92       	push	r5
     aca:	6f 92       	push	r6
     acc:	7f 92       	push	r7
     ace:	8f 92       	push	r8
     ad0:	9f 92       	push	r9
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	3c 01       	movw	r6, r24
     ae8:	1b 01       	movw	r2, r22
     aea:	5a 01       	movw	r10, r20
     aec:	29 01       	movw	r4, r18
     aee:	ca 01       	movw	r24, r20
     af0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <pvPortMalloc>
     af4:	6c 01       	movw	r12, r24
     af6:	89 2b       	or	r24, r25
     af8:	71 f0       	breq	.+28     	; 0xb16 <xTaskCreate+0x54>
     afa:	86 e2       	ldi	r24, 0x26	; 38
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <pvPortMalloc>
     b02:	ec 01       	movw	r28, r24
     b04:	89 2b       	or	r24, r25
     b06:	19 f0       	breq	.+6      	; 0xb0e <xTaskCreate+0x4c>
     b08:	d8 8e       	std	Y+24, r13	; 0x18
     b0a:	cf 8a       	std	Y+23, r12	; 0x17
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <xTaskCreate+0x58>
     b0e:	c6 01       	movw	r24, r12
     b10:	0e 94 96 03 	call	0x72c	; 0x72c <vPortFree>
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <xTaskCreate+0x58>
     b16:	c0 e0       	ldi	r28, 0x00	; 0
     b18:	d0 e0       	ldi	r29, 0x00	; 0
     b1a:	20 97       	sbiw	r28, 0x00	; 0
     b1c:	91 f0       	breq	.+36     	; 0xb42 <xTaskCreate+0x80>
     b1e:	95 01       	movw	r18, r10
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	81 2c       	mov	r8, r1
     b26:	91 2c       	mov	r9, r1
     b28:	5e 01       	movw	r10, r28
     b2a:	67 01       	movw	r12, r14
     b2c:	e0 2e       	mov	r14, r16
     b2e:	82 01       	movw	r16, r4
     b30:	b1 01       	movw	r22, r2
     b32:	c3 01       	movw	r24, r6
     b34:	0e 94 c0 03 	call	0x780	; 0x780 <prvInitialiseNewTask>
     b38:	ce 01       	movw	r24, r28
     b3a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <prvAddNewTaskToReadyList>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <xTaskCreate+0x82>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	9f 90       	pop	r9
     b5a:	8f 90       	pop	r8
     b5c:	7f 90       	pop	r7
     b5e:	6f 90       	pop	r6
     b60:	5f 90       	pop	r5
     b62:	4f 90       	pop	r4
     b64:	3f 90       	pop	r3
     b66:	2f 90       	pop	r2
     b68:	08 95       	ret

00000b6a <vTaskStartScheduler>:
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	0f 2e       	mov	r0, r31
     b72:	f5 e7       	ldi	r31, 0x75	; 117
     b74:	ef 2e       	mov	r14, r31
     b76:	f6 e0       	ldi	r31, 0x06	; 6
     b78:	ff 2e       	mov	r15, r31
     b7a:	f0 2d       	mov	r31, r0
     b7c:	00 e0       	ldi	r16, 0x00	; 0
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	45 e5       	ldi	r20, 0x55	; 85
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	61 e6       	ldi	r22, 0x61	; 97
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	84 e1       	ldi	r24, 0x14	; 20
     b8c:	95 e0       	ldi	r25, 0x05	; 5
     b8e:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskCreate>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	81 f4       	brne	.+32     	; 0xbb6 <vTaskStartScheduler+0x4c>
     b96:	f8 94       	cli
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	9f ef       	ldi	r25, 0xFF	; 255
     b9c:	90 93 78 06 	sts	0x0678, r25	; 0x800678 <xNextTaskUnblockTime+0x1>
     ba0:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <xNextTaskUnblockTime>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <xSchedulerRunning>
     baa:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <xTickCount+0x1>
     bae:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <xTickCount>
     bb2:	0e 94 75 02 	call	0x4ea	; 0x4ea <xPortStartScheduler>
     bb6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	08 95       	ret

00000bc2 <vTaskSuspendAll>:
     bc2:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxSchedulerSuspended>
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxSchedulerSuspended>
     bcc:	08 95       	ret

00000bce <xTaskGetTickCount>:
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	0f 92       	push	r0
     bd4:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <xTickCount>
     bd8:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <xTickCount+0x1>
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	08 95       	ret

00000be2 <xTaskIncrementTick>:
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxSchedulerSuspended>
     bee:	81 11       	cpse	r24, r1
     bf0:	01 c1       	rjmp	.+514    	; 0xdf4 <xTaskIncrementTick+0x212>
     bf2:	c0 91 80 06 	lds	r28, 0x0680	; 0x800680 <xTickCount>
     bf6:	d0 91 81 06 	lds	r29, 0x0681	; 0x800681 <xTickCount+0x1>
     bfa:	8e 01       	movw	r16, r28
     bfc:	0f 5f       	subi	r16, 0xFF	; 255
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
     c00:	10 93 81 06 	sts	0x0681, r17	; 0x800681 <xTickCount+0x1>
     c04:	00 93 80 06 	sts	0x0680, r16	; 0x800680 <xTickCount>
     c08:	01 15       	cp	r16, r1
     c0a:	11 05       	cpc	r17, r1
     c0c:	b9 f4       	brne	.+46     	; 0xc3c <xTaskIncrementTick+0x5a>
     c0e:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pxDelayedTaskList>
     c12:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
     c16:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <pxOverflowDelayedTaskList>
     c1a:	30 91 97 06 	lds	r19, 0x0697	; 0x800697 <pxOverflowDelayedTaskList+0x1>
     c1e:	30 93 99 06 	sts	0x0699, r19	; 0x800699 <pxDelayedTaskList+0x1>
     c22:	20 93 98 06 	sts	0x0698, r18	; 0x800698 <pxDelayedTaskList>
     c26:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <pxOverflowDelayedTaskList+0x1>
     c2a:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <pxOverflowDelayedTaskList>
     c2e:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <xNumOfOverflows>
     c32:	8f 5f       	subi	r24, 0xFF	; 255
     c34:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <xNumOfOverflows>
     c38:	0e 94 97 03 	call	0x72e	; 0x72e <prvResetNextTaskUnblockTime>
     c3c:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xNextTaskUnblockTime>
     c40:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <xNextTaskUnblockTime+0x1>
     c44:	08 17       	cp	r16, r24
     c46:	19 07       	cpc	r17, r25
     c48:	20 f4       	brcc	.+8      	; 0xc52 <xTaskIncrementTick+0x70>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	b8 c0       	rjmp	.+368    	; 0xdbe <xTaskIncrementTick+0x1dc>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	01 c0       	rjmp	.+2      	; 0xc54 <xTaskIncrementTick+0x72>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <pxDelayedTaskList>
     c58:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
     c5c:	90 81       	ld	r25, Z
     c5e:	91 11       	cpse	r25, r1
     c60:	07 c0       	rjmp	.+14     	; 0xc70 <xTaskIncrementTick+0x8e>
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	3f ef       	ldi	r19, 0xFF	; 255
     c66:	30 93 78 06 	sts	0x0678, r19	; 0x800678 <xNextTaskUnblockTime+0x1>
     c6a:	20 93 77 06 	sts	0x0677, r18	; 0x800677 <xNextTaskUnblockTime>
     c6e:	a7 c0       	rjmp	.+334    	; 0xdbe <xTaskIncrementTick+0x1dc>
     c70:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <pxDelayedTaskList>
     c74:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <pxDelayedTaskList+0x1>
     c78:	05 80       	ldd	r0, Z+5	; 0x05
     c7a:	f6 81       	ldd	r31, Z+6	; 0x06
     c7c:	e0 2d       	mov	r30, r0
     c7e:	06 80       	ldd	r0, Z+6	; 0x06
     c80:	f7 81       	ldd	r31, Z+7	; 0x07
     c82:	e0 2d       	mov	r30, r0
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	33 81       	ldd	r19, Z+3	; 0x03
     c88:	02 17       	cp	r16, r18
     c8a:	13 07       	cpc	r17, r19
     c8c:	28 f4       	brcc	.+10     	; 0xc98 <xTaskIncrementTick+0xb6>
     c8e:	30 93 78 06 	sts	0x0678, r19	; 0x800678 <xNextTaskUnblockTime+0x1>
     c92:	20 93 77 06 	sts	0x0677, r18	; 0x800677 <xNextTaskUnblockTime>
     c96:	93 c0       	rjmp	.+294    	; 0xdbe <xTaskIncrementTick+0x1dc>
     c98:	a2 85       	ldd	r26, Z+10	; 0x0a
     c9a:	b3 85       	ldd	r27, Z+11	; 0x0b
     c9c:	24 81       	ldd	r18, Z+4	; 0x04
     c9e:	35 81       	ldd	r19, Z+5	; 0x05
     ca0:	46 81       	ldd	r20, Z+6	; 0x06
     ca2:	57 81       	ldd	r21, Z+7	; 0x07
     ca4:	e9 01       	movw	r28, r18
     ca6:	5d 83       	std	Y+5, r21	; 0x05
     ca8:	4c 83       	std	Y+4, r20	; 0x04
     caa:	26 81       	ldd	r18, Z+6	; 0x06
     cac:	37 81       	ldd	r19, Z+7	; 0x07
     cae:	44 81       	ldd	r20, Z+4	; 0x04
     cb0:	55 81       	ldd	r21, Z+5	; 0x05
     cb2:	e9 01       	movw	r28, r18
     cb4:	5b 83       	std	Y+3, r21	; 0x03
     cb6:	4a 83       	std	Y+2, r20	; 0x02
     cb8:	11 96       	adiw	r26, 0x01	; 1
     cba:	2d 91       	ld	r18, X+
     cbc:	3c 91       	ld	r19, X
     cbe:	12 97       	sbiw	r26, 0x02	; 2
     cc0:	af 01       	movw	r20, r30
     cc2:	4e 5f       	subi	r20, 0xFE	; 254
     cc4:	5f 4f       	sbci	r21, 0xFF	; 255
     cc6:	24 17       	cp	r18, r20
     cc8:	35 07       	cpc	r19, r21
     cca:	31 f4       	brne	.+12     	; 0xcd8 <xTaskIncrementTick+0xf6>
     ccc:	26 81       	ldd	r18, Z+6	; 0x06
     cce:	37 81       	ldd	r19, Z+7	; 0x07
     cd0:	12 96       	adiw	r26, 0x02	; 2
     cd2:	3c 93       	st	X, r19
     cd4:	2e 93       	st	-X, r18
     cd6:	11 97       	sbiw	r26, 0x01	; 1
     cd8:	13 86       	std	Z+11, r1	; 0x0b
     cda:	12 86       	std	Z+10, r1	; 0x0a
     cdc:	9c 91       	ld	r25, X
     cde:	91 50       	subi	r25, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	a4 89       	ldd	r26, Z+20	; 0x14
     ce4:	b5 89       	ldd	r27, Z+21	; 0x15
     ce6:	10 97       	sbiw	r26, 0x00	; 0
     ce8:	19 f1       	breq	.+70     	; 0xd30 <xTaskIncrementTick+0x14e>
     cea:	26 85       	ldd	r18, Z+14	; 0x0e
     cec:	37 85       	ldd	r19, Z+15	; 0x0f
     cee:	60 89       	ldd	r22, Z+16	; 0x10
     cf0:	71 89       	ldd	r23, Z+17	; 0x11
     cf2:	e9 01       	movw	r28, r18
     cf4:	7d 83       	std	Y+5, r23	; 0x05
     cf6:	6c 83       	std	Y+4, r22	; 0x04
     cf8:	20 89       	ldd	r18, Z+16	; 0x10
     cfa:	31 89       	ldd	r19, Z+17	; 0x11
     cfc:	66 85       	ldd	r22, Z+14	; 0x0e
     cfe:	77 85       	ldd	r23, Z+15	; 0x0f
     d00:	e9 01       	movw	r28, r18
     d02:	7b 83       	std	Y+3, r23	; 0x03
     d04:	6a 83       	std	Y+2, r22	; 0x02
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	6d 91       	ld	r22, X+
     d0a:	7c 91       	ld	r23, X
     d0c:	12 97       	sbiw	r26, 0x02	; 2
     d0e:	9f 01       	movw	r18, r30
     d10:	24 5f       	subi	r18, 0xF4	; 244
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	62 17       	cp	r22, r18
     d16:	73 07       	cpc	r23, r19
     d18:	31 f4       	brne	.+12     	; 0xd26 <xTaskIncrementTick+0x144>
     d1a:	20 89       	ldd	r18, Z+16	; 0x10
     d1c:	31 89       	ldd	r19, Z+17	; 0x11
     d1e:	12 96       	adiw	r26, 0x02	; 2
     d20:	3c 93       	st	X, r19
     d22:	2e 93       	st	-X, r18
     d24:	11 97       	sbiw	r26, 0x01	; 1
     d26:	15 8a       	std	Z+21, r1	; 0x15
     d28:	14 8a       	std	Z+20, r1	; 0x14
     d2a:	9c 91       	ld	r25, X
     d2c:	91 50       	subi	r25, 0x01	; 1
     d2e:	9c 93       	st	X, r25
     d30:	26 89       	ldd	r18, Z+22	; 0x16
     d32:	90 91 7f 06 	lds	r25, 0x067F	; 0x80067f <uxTopReadyPriority>
     d36:	92 17       	cp	r25, r18
     d38:	10 f4       	brcc	.+4      	; 0xd3e <xTaskIncrementTick+0x15c>
     d3a:	20 93 7f 06 	sts	0x067F, r18	; 0x80067f <uxTopReadyPriority>
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	d9 01       	movw	r26, r18
     d42:	aa 0f       	add	r26, r26
     d44:	bb 1f       	adc	r27, r27
     d46:	aa 0f       	add	r26, r26
     d48:	bb 1f       	adc	r27, r27
     d4a:	aa 0f       	add	r26, r26
     d4c:	bb 1f       	adc	r27, r27
     d4e:	2a 0f       	add	r18, r26
     d50:	3b 1f       	adc	r19, r27
     d52:	d9 01       	movw	r26, r18
     d54:	a4 55       	subi	r26, 0x54	; 84
     d56:	b9 4f       	sbci	r27, 0xF9	; 249
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	0d 90       	ld	r0, X+
     d5c:	bc 91       	ld	r27, X
     d5e:	a0 2d       	mov	r26, r0
     d60:	b5 83       	std	Z+5, r27	; 0x05
     d62:	a4 83       	std	Z+4, r26	; 0x04
     d64:	14 96       	adiw	r26, 0x04	; 4
     d66:	2d 91       	ld	r18, X+
     d68:	3c 91       	ld	r19, X
     d6a:	15 97       	sbiw	r26, 0x05	; 5
     d6c:	37 83       	std	Z+7, r19	; 0x07
     d6e:	26 83       	std	Z+6, r18	; 0x06
     d70:	14 96       	adiw	r26, 0x04	; 4
     d72:	2d 91       	ld	r18, X+
     d74:	3c 91       	ld	r19, X
     d76:	15 97       	sbiw	r26, 0x05	; 5
     d78:	e9 01       	movw	r28, r18
     d7a:	5b 83       	std	Y+3, r21	; 0x03
     d7c:	4a 83       	std	Y+2, r20	; 0x02
     d7e:	15 96       	adiw	r26, 0x05	; 5
     d80:	5c 93       	st	X, r21
     d82:	4e 93       	st	-X, r20
     d84:	14 97       	sbiw	r26, 0x04	; 4
     d86:	a6 89       	ldd	r26, Z+22	; 0x16
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	9d 01       	movw	r18, r26
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	a2 0f       	add	r26, r18
     d9a:	b3 1f       	adc	r27, r19
     d9c:	a4 55       	subi	r26, 0x54	; 84
     d9e:	b9 4f       	sbci	r27, 0xF9	; 249
     da0:	b3 87       	std	Z+11, r27	; 0x0b
     da2:	a2 87       	std	Z+10, r26	; 0x0a
     da4:	9c 91       	ld	r25, X
     da6:	9f 5f       	subi	r25, 0xFF	; 255
     da8:	9c 93       	st	X, r25
     daa:	26 89       	ldd	r18, Z+22	; 0x16
     dac:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     db0:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     db4:	96 89       	ldd	r25, Z+22	; 0x16
     db6:	29 17       	cp	r18, r25
     db8:	08 f0       	brcs	.+2      	; 0xdbc <xTaskIncrementTick+0x1da>
     dba:	49 cf       	rjmp	.-366    	; 0xc4e <xTaskIncrementTick+0x6c>
     dbc:	4b cf       	rjmp	.-362    	; 0xc54 <xTaskIncrementTick+0x72>
     dbe:	e0 91 d0 06 	lds	r30, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     dc2:	f0 91 d1 06 	lds	r31, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     dc6:	26 89       	ldd	r18, Z+22	; 0x16
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	f9 01       	movw	r30, r18
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	2e 0f       	add	r18, r30
     dda:	3f 1f       	adc	r19, r31
     ddc:	f9 01       	movw	r30, r18
     dde:	e4 55       	subi	r30, 0x54	; 84
     de0:	f9 4f       	sbci	r31, 0xF9	; 249
     de2:	90 81       	ld	r25, Z
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f0       	brcs	.+2      	; 0xdea <xTaskIncrementTick+0x208>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <xYieldPending>
     dee:	91 11       	cpse	r25, r1
     df0:	0c c0       	rjmp	.+24     	; 0xe0a <xTaskIncrementTick+0x228>
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <xTaskIncrementTick+0x22a>
     df4:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <xPendedTicks>
     df8:	90 91 7d 06 	lds	r25, 0x067D	; 0x80067d <xPendedTicks+0x1>
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	90 93 7d 06 	sts	0x067D, r25	; 0x80067d <xPendedTicks+0x1>
     e02:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <xPendedTicks>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <xTaskIncrementTick+0x22a>
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <xTaskResumeAll>:
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	0f 92       	push	r0
     e20:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxSchedulerSuspended>
     e24:	81 50       	subi	r24, 0x01	; 1
     e26:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxSchedulerSuspended>
     e2a:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxSchedulerSuspended>
     e2e:	81 11       	cpse	r24, r1
     e30:	bf c0       	rjmp	.+382    	; 0xfb0 <xTaskResumeAll+0x19a>
     e32:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <uxCurrentNumberOfTasks>
     e36:	81 11       	cpse	r24, r1
     e38:	96 c0       	rjmp	.+300    	; 0xf66 <xTaskResumeAll+0x150>
     e3a:	bd c0       	rjmp	.+378    	; 0xfb6 <xTaskResumeAll+0x1a0>
     e3c:	e0 91 92 06 	lds	r30, 0x0692	; 0x800692 <xPendingReadyList+0x5>
     e40:	f0 91 93 06 	lds	r31, 0x0693	; 0x800693 <xPendingReadyList+0x6>
     e44:	06 80       	ldd	r0, Z+6	; 0x06
     e46:	f7 81       	ldd	r31, Z+7	; 0x07
     e48:	e0 2d       	mov	r30, r0
     e4a:	a4 89       	ldd	r26, Z+20	; 0x14
     e4c:	b5 89       	ldd	r27, Z+21	; 0x15
     e4e:	c6 85       	ldd	r28, Z+14	; 0x0e
     e50:	d7 85       	ldd	r29, Z+15	; 0x0f
     e52:	80 89       	ldd	r24, Z+16	; 0x10
     e54:	91 89       	ldd	r25, Z+17	; 0x11
     e56:	9d 83       	std	Y+5, r25	; 0x05
     e58:	8c 83       	std	Y+4, r24	; 0x04
     e5a:	c0 89       	ldd	r28, Z+16	; 0x10
     e5c:	d1 89       	ldd	r29, Z+17	; 0x11
     e5e:	86 85       	ldd	r24, Z+14	; 0x0e
     e60:	97 85       	ldd	r25, Z+15	; 0x0f
     e62:	9b 83       	std	Y+3, r25	; 0x03
     e64:	8a 83       	std	Y+2, r24	; 0x02
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	2d 91       	ld	r18, X+
     e6a:	3c 91       	ld	r19, X
     e6c:	12 97       	sbiw	r26, 0x02	; 2
     e6e:	cf 01       	movw	r24, r30
     e70:	0c 96       	adiw	r24, 0x0c	; 12
     e72:	28 17       	cp	r18, r24
     e74:	39 07       	cpc	r19, r25
     e76:	31 f4       	brne	.+12     	; 0xe84 <xTaskResumeAll+0x6e>
     e78:	80 89       	ldd	r24, Z+16	; 0x10
     e7a:	91 89       	ldd	r25, Z+17	; 0x11
     e7c:	12 96       	adiw	r26, 0x02	; 2
     e7e:	9c 93       	st	X, r25
     e80:	8e 93       	st	-X, r24
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	15 8a       	std	Z+21, r1	; 0x15
     e86:	14 8a       	std	Z+20, r1	; 0x14
     e88:	8c 91       	ld	r24, X
     e8a:	81 50       	subi	r24, 0x01	; 1
     e8c:	8c 93       	st	X, r24
     e8e:	a2 85       	ldd	r26, Z+10	; 0x0a
     e90:	b3 85       	ldd	r27, Z+11	; 0x0b
     e92:	c4 81       	ldd	r28, Z+4	; 0x04
     e94:	d5 81       	ldd	r29, Z+5	; 0x05
     e96:	86 81       	ldd	r24, Z+6	; 0x06
     e98:	97 81       	ldd	r25, Z+7	; 0x07
     e9a:	9d 83       	std	Y+5, r25	; 0x05
     e9c:	8c 83       	std	Y+4, r24	; 0x04
     e9e:	c6 81       	ldd	r28, Z+6	; 0x06
     ea0:	d7 81       	ldd	r29, Z+7	; 0x07
     ea2:	84 81       	ldd	r24, Z+4	; 0x04
     ea4:	95 81       	ldd	r25, Z+5	; 0x05
     ea6:	9b 83       	std	Y+3, r25	; 0x03
     ea8:	8a 83       	std	Y+2, r24	; 0x02
     eaa:	11 96       	adiw	r26, 0x01	; 1
     eac:	8d 91       	ld	r24, X+
     eae:	9c 91       	ld	r25, X
     eb0:	12 97       	sbiw	r26, 0x02	; 2
     eb2:	9f 01       	movw	r18, r30
     eb4:	2e 5f       	subi	r18, 0xFE	; 254
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	82 17       	cp	r24, r18
     eba:	93 07       	cpc	r25, r19
     ebc:	31 f4       	brne	.+12     	; 0xeca <xTaskResumeAll+0xb4>
     ebe:	86 81       	ldd	r24, Z+6	; 0x06
     ec0:	97 81       	ldd	r25, Z+7	; 0x07
     ec2:	12 96       	adiw	r26, 0x02	; 2
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
     ec8:	11 97       	sbiw	r26, 0x01	; 1
     eca:	13 86       	std	Z+11, r1	; 0x0b
     ecc:	12 86       	std	Z+10, r1	; 0x0a
     ece:	8c 91       	ld	r24, X
     ed0:	81 50       	subi	r24, 0x01	; 1
     ed2:	8c 93       	st	X, r24
     ed4:	86 89       	ldd	r24, Z+22	; 0x16
     ed6:	90 91 7f 06 	lds	r25, 0x067F	; 0x80067f <uxTopReadyPriority>
     eda:	98 17       	cp	r25, r24
     edc:	10 f4       	brcc	.+4      	; 0xee2 <xTaskResumeAll+0xcc>
     ede:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <uxTopReadyPriority>
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	dc 01       	movw	r26, r24
     ee6:	aa 0f       	add	r26, r26
     ee8:	bb 1f       	adc	r27, r27
     eea:	aa 0f       	add	r26, r26
     eec:	bb 1f       	adc	r27, r27
     eee:	aa 0f       	add	r26, r26
     ef0:	bb 1f       	adc	r27, r27
     ef2:	8a 0f       	add	r24, r26
     ef4:	9b 1f       	adc	r25, r27
     ef6:	dc 01       	movw	r26, r24
     ef8:	a4 55       	subi	r26, 0x54	; 84
     efa:	b9 4f       	sbci	r27, 0xF9	; 249
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	0d 90       	ld	r0, X+
     f00:	bc 91       	ld	r27, X
     f02:	a0 2d       	mov	r26, r0
     f04:	b5 83       	std	Z+5, r27	; 0x05
     f06:	a4 83       	std	Z+4, r26	; 0x04
     f08:	14 96       	adiw	r26, 0x04	; 4
     f0a:	8d 91       	ld	r24, X+
     f0c:	9c 91       	ld	r25, X
     f0e:	15 97       	sbiw	r26, 0x05	; 5
     f10:	97 83       	std	Z+7, r25	; 0x07
     f12:	86 83       	std	Z+6, r24	; 0x06
     f14:	14 96       	adiw	r26, 0x04	; 4
     f16:	cd 91       	ld	r28, X+
     f18:	dc 91       	ld	r29, X
     f1a:	15 97       	sbiw	r26, 0x05	; 5
     f1c:	3b 83       	std	Y+3, r19	; 0x03
     f1e:	2a 83       	std	Y+2, r18	; 0x02
     f20:	15 96       	adiw	r26, 0x05	; 5
     f22:	3c 93       	st	X, r19
     f24:	2e 93       	st	-X, r18
     f26:	14 97       	sbiw	r26, 0x04	; 4
     f28:	a6 89       	ldd	r26, Z+22	; 0x16
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	cd 01       	movw	r24, r26
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	a8 0f       	add	r26, r24
     f3c:	b9 1f       	adc	r27, r25
     f3e:	a4 55       	subi	r26, 0x54	; 84
     f40:	b9 4f       	sbci	r27, 0xF9	; 249
     f42:	b3 87       	std	Z+11, r27	; 0x0b
     f44:	a2 87       	std	Z+10, r26	; 0x0a
     f46:	8c 91       	ld	r24, X
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	8c 93       	st	X, r24
     f4c:	96 89       	ldd	r25, Z+22	; 0x16
     f4e:	a0 91 d0 06 	lds	r26, 0x06D0	; 0x8006d0 <pxCurrentTCB>
     f52:	b0 91 d1 06 	lds	r27, 0x06D1	; 0x8006d1 <pxCurrentTCB+0x1>
     f56:	56 96       	adiw	r26, 0x16	; 22
     f58:	8c 91       	ld	r24, X
     f5a:	98 17       	cp	r25, r24
     f5c:	30 f0       	brcs	.+12     	; 0xf6a <xTaskResumeAll+0x154>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <xYieldPending>
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <xTaskResumeAll+0x154>
     f66:	e0 e0       	ldi	r30, 0x00	; 0
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xPendingReadyList>
     f6e:	81 11       	cpse	r24, r1
     f70:	65 cf       	rjmp	.-310    	; 0xe3c <xTaskResumeAll+0x26>
     f72:	ef 2b       	or	r30, r31
     f74:	11 f0       	breq	.+4      	; 0xf7a <xTaskResumeAll+0x164>
     f76:	0e 94 97 03 	call	0x72e	; 0x72e <prvResetNextTaskUnblockTime>
     f7a:	c0 91 7c 06 	lds	r28, 0x067C	; 0x80067c <xPendedTicks>
     f7e:	d0 91 7d 06 	lds	r29, 0x067D	; 0x80067d <xPendedTicks+0x1>
     f82:	20 97       	sbiw	r28, 0x00	; 0
     f84:	69 f0       	breq	.+26     	; 0xfa0 <xTaskResumeAll+0x18a>
     f86:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <xTaskIncrementTick>
     f8a:	88 23       	and	r24, r24
     f8c:	19 f0       	breq	.+6      	; 0xf94 <xTaskResumeAll+0x17e>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <xYieldPending>
     f94:	21 97       	sbiw	r28, 0x01	; 1
     f96:	b9 f7       	brne	.-18     	; 0xf86 <xTaskResumeAll+0x170>
     f98:	10 92 7d 06 	sts	0x067D, r1	; 0x80067d <xPendedTicks+0x1>
     f9c:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <xPendedTicks>
     fa0:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <xYieldPending>
     fa4:	88 23       	and	r24, r24
     fa6:	31 f0       	breq	.+12     	; 0xfb4 <xTaskResumeAll+0x19e>
     fa8:	0e 94 a4 02 	call	0x548	; 0x548 <vPortYield>
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <xTaskResumeAll+0x1a0>
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <xTaskResumeAll+0x1a0>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0f 90       	pop	r0
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <xTaskDelayUntil>:
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	8c 01       	movw	r16, r24
     fca:	eb 01       	movw	r28, r22
     fcc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vTaskSuspendAll>
     fd0:	40 91 80 06 	lds	r20, 0x0680	; 0x800680 <xTickCount>
     fd4:	50 91 81 06 	lds	r21, 0x0681	; 0x800681 <xTickCount+0x1>
     fd8:	f8 01       	movw	r30, r16
     fda:	20 81       	ld	r18, Z
     fdc:	31 81       	ldd	r19, Z+1	; 0x01
     fde:	c9 01       	movw	r24, r18
     fe0:	8c 0f       	add	r24, r28
     fe2:	9d 1f       	adc	r25, r29
     fe4:	42 17       	cp	r20, r18
     fe6:	53 07       	cpc	r21, r19
     fe8:	40 f4       	brcc	.+16     	; 0xffa <xTaskDelayUntil+0x3a>
     fea:	82 17       	cp	r24, r18
     fec:	93 07       	cpc	r25, r19
     fee:	68 f4       	brcc	.+26     	; 0x100a <xTaskDelayUntil+0x4a>
     ff0:	48 17       	cp	r20, r24
     ff2:	59 07       	cpc	r21, r25
     ff4:	60 f0       	brcs	.+24     	; 0x100e <xTaskDelayUntil+0x4e>
     ff6:	c0 e0       	ldi	r28, 0x00	; 0
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <xTaskDelayUntil+0x58>
     ffa:	82 17       	cp	r24, r18
     ffc:	93 07       	cpc	r25, r19
     ffe:	48 f0       	brcs	.+18     	; 0x1012 <xTaskDelayUntil+0x52>
    1000:	48 17       	cp	r20, r24
    1002:	59 07       	cpc	r21, r25
    1004:	40 f0       	brcs	.+16     	; 0x1016 <xTaskDelayUntil+0x56>
    1006:	c0 e0       	ldi	r28, 0x00	; 0
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <xTaskDelayUntil+0x58>
    100a:	c0 e0       	ldi	r28, 0x00	; 0
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <xTaskDelayUntil+0x58>
    100e:	c1 e0       	ldi	r28, 0x01	; 1
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <xTaskDelayUntil+0x58>
    1012:	c1 e0       	ldi	r28, 0x01	; 1
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <xTaskDelayUntil+0x58>
    1016:	c1 e0       	ldi	r28, 0x01	; 1
    1018:	f8 01       	movw	r30, r16
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
    101e:	cc 23       	and	r28, r28
    1020:	29 f0       	breq	.+10     	; 0x102c <xTaskDelayUntil+0x6c>
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	84 1b       	sub	r24, r20
    1026:	95 0b       	sbc	r25, r21
    1028:	0e 94 1d 05 	call	0xa3a	; 0xa3a <prvAddCurrentTaskToDelayedList>
    102c:	0e 94 0b 07 	call	0xe16	; 0xe16 <xTaskResumeAll>
    1030:	81 11       	cpse	r24, r1
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <xTaskDelayUntil+0x78>
    1034:	0e 94 a4 02 	call	0x548	; 0x548 <vPortYield>
    1038:	8c 2f       	mov	r24, r28
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <vTaskDelay>:
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ec 01       	movw	r28, r24
    104a:	89 2b       	or	r24, r25
    104c:	49 f0       	breq	.+18     	; 0x1060 <vTaskDelay+0x1c>
    104e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <vTaskSuspendAll>
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	ce 01       	movw	r24, r28
    1056:	0e 94 1d 05 	call	0xa3a	; 0xa3a <prvAddCurrentTaskToDelayedList>
    105a:	0e 94 0b 07 	call	0xe16	; 0xe16 <xTaskResumeAll>
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <vTaskDelay+0x1e>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	81 11       	cpse	r24, r1
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vTaskDelay+0x26>
    1066:	0e 94 a4 02 	call	0x548	; 0x548 <vPortYield>
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1070:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxSchedulerSuspended>
    1074:	88 23       	and	r24, r24
    1076:	21 f0       	breq	.+8      	; 0x1080 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <xYieldPending>
    107e:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
    1080:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1084:	20 91 7f 06 	lds	r18, 0x067F	; 0x80067f <uxTopReadyPriority>
    1088:	01 c0       	rjmp	.+2      	; 0x108c <vTaskSwitchContext+0x1c>
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	82 2f       	mov	r24, r18
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	fc 01       	movw	r30, r24
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e8 0f       	add	r30, r24
    10a0:	f9 1f       	adc	r31, r25
    10a2:	e4 55       	subi	r30, 0x54	; 84
    10a4:	f9 4f       	sbci	r31, 0xF9	; 249
    10a6:	30 81       	ld	r19, Z
    10a8:	33 23       	and	r19, r19
    10aa:	79 f3       	breq	.-34     	; 0x108a <vTaskSwitchContext+0x1a>
    10ac:	ac 01       	movw	r20, r24
    10ae:	44 0f       	add	r20, r20
    10b0:	55 1f       	adc	r21, r21
    10b2:	44 0f       	add	r20, r20
    10b4:	55 1f       	adc	r21, r21
    10b6:	44 0f       	add	r20, r20
    10b8:	55 1f       	adc	r21, r21
    10ba:	48 0f       	add	r20, r24
    10bc:	59 1f       	adc	r21, r25
    10be:	df 01       	movw	r26, r30
    10c0:	01 80       	ldd	r0, Z+1	; 0x01
    10c2:	f2 81       	ldd	r31, Z+2	; 0x02
    10c4:	e0 2d       	mov	r30, r0
    10c6:	02 80       	ldd	r0, Z+2	; 0x02
    10c8:	f3 81       	ldd	r31, Z+3	; 0x03
    10ca:	e0 2d       	mov	r30, r0
    10cc:	12 96       	adiw	r26, 0x02	; 2
    10ce:	fc 93       	st	X, r31
    10d0:	ee 93       	st	-X, r30
    10d2:	11 97       	sbiw	r26, 0x01	; 1
    10d4:	41 55       	subi	r20, 0x51	; 81
    10d6:	59 4f       	sbci	r21, 0xF9	; 249
    10d8:	e4 17       	cp	r30, r20
    10da:	f5 07       	cpc	r31, r21
    10dc:	29 f4       	brne	.+10     	; 0x10e8 <vTaskSwitchContext+0x78>
    10de:	42 81       	ldd	r20, Z+2	; 0x02
    10e0:	53 81       	ldd	r21, Z+3	; 0x03
    10e2:	fd 01       	movw	r30, r26
    10e4:	52 83       	std	Z+2, r21	; 0x02
    10e6:	41 83       	std	Z+1, r20	; 0x01
    10e8:	fc 01       	movw	r30, r24
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	8e 0f       	add	r24, r30
    10f8:	9f 1f       	adc	r25, r31
    10fa:	fc 01       	movw	r30, r24
    10fc:	e4 55       	subi	r30, 0x54	; 84
    10fe:	f9 4f       	sbci	r31, 0xF9	; 249
    1100:	01 80       	ldd	r0, Z+1	; 0x01
    1102:	f2 81       	ldd	r31, Z+2	; 0x02
    1104:	e0 2d       	mov	r30, r0
    1106:	86 81       	ldd	r24, Z+6	; 0x06
    1108:	97 81       	ldd	r25, Z+7	; 0x07
    110a:	90 93 d1 06 	sts	0x06D1, r25	; 0x8006d1 <pxCurrentTCB+0x1>
    110e:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <pxCurrentTCB>
    1112:	20 93 7f 06 	sts	0x067F, r18	; 0x80067f <uxTopReadyPriority>
    1116:	08 95       	ret

00001118 <Task1_Func>:
		     
	}
}

void Task1_Func(void *parameters)
{
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	00 d0       	rcall	.+0      	; 0x111e <Task1_Func+0x6>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS( 10 );

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    1122:	0e 94 e7 05 	call	0xbce	; 0xbce <xTaskGetTickCount>
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime,xPeriod);
    112a:	6a e0       	ldi	r22, 0x0A	; 10
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	ce 01       	movw	r24, r28
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <xTaskDelayUntil>
		
		g_adcResult=ADC_readChannel(0);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <ADC_readChannel>
    113c:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <g_adcResult+0x1>
    1140:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <g_adcResult>
		
		if((g_adcResult >=341 ) && (g_adcResult < 512))
    1144:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <g_adcResult>
    1148:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <g_adcResult+0x1>
    114c:	85 35       	cpi	r24, 0x55	; 85
    114e:	91 40       	sbci	r25, 0x01	; 1
    1150:	68 f0       	brcs	.+26     	; 0x116c <Task1_Func+0x54>
    1152:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <g_adcResult>
    1156:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <g_adcResult+0x1>
    115a:	81 15       	cp	r24, r1
    115c:	92 40       	sbci	r25, 0x02	; 2
    115e:	30 f4       	brcc	.+12     	; 0x116c <Task1_Func+0x54>
		{
			counter++;
    1160:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <counter>
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <counter>
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <Task1_Func+0x58>
		}
		else
		{
			counter=0;
    116c:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <counter>
		}
		
		if (counter==10)
    1170:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <counter>
    1174:	8a 30       	cpi	r24, 0x0A	; 10
    1176:	29 f4       	brne	.+10     	; 0x1182 <Task1_Func+0x6a>
		{
			counter=0;
    1178:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <counter>
			pedestrian_request = DETECTED;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <pedestrian_request>
		}
		
		if(pedestrian_request==DETECTED)
    1182:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pedestrian_request>
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	81 f6       	brne	.-96     	; 0x112a <Task1_Func+0x12>
		{
			PORTB ^= (1<<5);
    118a:	98 b3       	in	r25, 0x18	; 24
    118c:	80 e2       	ldi	r24, 0x20	; 32
    118e:	89 27       	eor	r24, r25
    1190:	88 bb       	out	0x18, r24	; 24
			pedestrian_request=UNDETECTED;
    1192:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <pedestrian_request>
    1196:	c9 cf       	rjmp	.-110    	; 0x112a <Task1_Func+0x12>

00001198 <Task2_Func>:
void Task2_Func(void *parameters)
{
    
	while(1)
	{ 
		   switch(state)
    1198:	80 91 d9 06 	lds	r24, 0x06D9	; 0x8006d9 <state>
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	09 f1       	breq	.+66     	; 0x11e2 <Task2_Func+0x4a>
    11a0:	18 f0       	brcs	.+6      	; 0x11a8 <Task2_Func+0x10>
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	61 f1       	breq	.+88     	; 0x11fe <Task2_Func+0x66>
    11a6:	f8 cf       	rjmp	.-16     	; 0x1198 <Task2_Func>
		   
		   {
			   case Green:
			   {
				   
				   traffic_light_handele(green);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 15 01 	call	0x22a	; 0x22a <traffic_light_handele>
				   two_digit_7seg(0);
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0e 94 a4 00 	call	0x148	; 0x148 <two_digit_7seg>
				   
				   
				   if(pedestrian_request==DETECTED)
    11b4:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pedestrian_request>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	71 f4       	brne	.+28     	; 0x11d8 <Task2_Func+0x40>
				   {
					   if(emergency_detection==UNDETECTED)
    11bc:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <emergency_detection>
    11c0:	81 11       	cpse	r24, r1
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <Task2_Func+0x34>
					   {
						   state=Yellow;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <state>
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <Task2_Func+0x3c>
					   }
					   else
					   {
						   //while(!(emergency_detection == DETECTED))
						   //{
						   state=Green;
    11cc:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <state>
						   emergency_detection=UNDETECTED;
    11d0:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <emergency_detection>
						   //}
					   }
					   pedestrian_request=UNDETECTED;
    11d4:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <pedestrian_request>
					   
				   }
				   vTaskDelay(pdMS_TO_TICKS( 10 ));
    11d8:	8a e0       	ldi	r24, 0x0A	; 10
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 22 08 	call	0x1044	; 0x1044 <vTaskDelay>
				   break;
    11e0:	db cf       	rjmp	.-74     	; 0x1198 <Task2_Func>
			   }
			   
			   case Yellow:
			   {
				   traffic_light_handele(yellow); //Encrement el counter till 10 sec and display it on sevensegemnt
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	0e 94 15 01 	call	0x22a	; 0x22a <traffic_light_handele>
				   two_digit_7seg(10);
    11e8:	8a e0       	ldi	r24, 0x0A	; 10
    11ea:	0e 94 a4 00 	call	0x148	; 0x148 <two_digit_7seg>
				   display_off;
				   state=Red;
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <state>
				   vTaskDelay(pdMS_TO_TICKS( 10 ));
    11f4:	8a e0       	ldi	r24, 0x0A	; 10
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 22 08 	call	0x1044	; 0x1044 <vTaskDelay>
				   break;
    11fc:	cd cf       	rjmp	.-102    	; 0x1198 <Task2_Func>
			   }
			   
			   
			   case Red:
			   {
				   traffic_light_handele(red);
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	0e 94 15 01 	call	0x22a	; 0x22a <traffic_light_handele>
				   two_digit_7seg(30);
    1204:	8e e1       	ldi	r24, 0x1E	; 30
    1206:	0e 94 a4 00 	call	0x148	; 0x148 <two_digit_7seg>
				   
				   
				   
				   state=Green;
    120a:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <state>
				   vTaskDelay(pdMS_TO_TICKS( 10 ));
    120e:	8a e0       	ldi	r24, 0x0A	; 10
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 22 08 	call	0x1044	; 0x1044 <vTaskDelay>
				   break;
    1216:	c0 cf       	rjmp	.-128    	; 0x1198 <Task2_Func>

00001218 <emergencydetection_Func>:
	}
	vTaskDelay(pdMS_TO_TICKS( 100 ));
}

void emergencydetection_Func(void *parameters)
{
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	6e 97       	sbiw	r28, 0x1e	; 30
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
	uint8 *head;
	uint8 *data;
	

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(9600);
    122c:	60 e8       	ldi	r22, 0x80	; 128
    122e:	75 e2       	ldi	r23, 0x25	; 37
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 37 01 	call	0x26e	; 0x26e <UART_init>

	while(1)
	{
		//data = UART_recieveByte(); /* Receive Byte from Terminal1 */
		//UART_sendByte(data);       /* Re-send the received byte to Terminal2 */
		head=UART_receiveString(Str);     /* Receive String from Terminal */
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_receiveString>
		data=UART_receiveString(Str);
    1240:	ce 01       	movw	r24, r28
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	0e 94 73 01 	call	0x2e6	; 0x2e6 <UART_receiveString>
    1248:	fc 01       	movw	r30, r24
		
		if((data[12] == (uint8)'0') && (data[13] == (uint8)'2')  || (data[13] == (uint8)'3'))
    124a:	84 85       	ldd	r24, Z+12	; 0x0c
    124c:	80 33       	cpi	r24, 0x30	; 48
    124e:	19 f4       	brne	.+6      	; 0x1256 <emergencydetection_Func+0x3e>
    1250:	85 85       	ldd	r24, Z+13	; 0x0d
    1252:	82 33       	cpi	r24, 0x32	; 50
    1254:	19 f0       	breq	.+6      	; 0x125c <emergencydetection_Func+0x44>
    1256:	85 85       	ldd	r24, Z+13	; 0x0d
    1258:	83 33       	cpi	r24, 0x33	; 51
    125a:	61 f4       	brne	.+24     	; 0x1274 <emergencydetection_Func+0x5c>
		{
			emergency_detection=DETECTED;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <emergency_detection>
			UART_sendString("Emergency!\r");
    1262:	86 e6       	ldi	r24, 0x66	; 102
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 60 01 	call	0x2c0	; 0x2c0 <UART_sendString>
			vTaskDelay(pdMS_TO_TICKS( 10000 ));
    126a:	86 e2       	ldi	r24, 0x26	; 38
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 22 08 	call	0x1044	; 0x1044 <vTaskDelay>
    1272:	e2 cf       	rjmp	.-60     	; 0x1238 <emergencydetection_Func+0x20>
		}
		else
		{
			
			UART_sendString("No Emergency\r");
    1274:	82 e7       	ldi	r24, 0x72	; 114
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 60 01 	call	0x2c0	; 0x2c0 <UART_sendString>
    127c:	dd cf       	rjmp	.-70     	; 0x1238 <emergencydetection_Func+0x20>

0000127e <main>:
TaskHandle_t task3ptr;


int main(void)
{
		DDRB |= (1<<5);   // Configure pin 5 in PORTB as output pin
    127e:	87 b3       	in	r24, 0x17	; 23
    1280:	80 62       	ori	r24, 0x20	; 32
    1282:	87 bb       	out	0x17, r24	; 23
		PORTB &= ~(1<<5);
    1284:	88 b3       	in	r24, 0x18	; 24
    1286:	8f 7d       	andi	r24, 0xDF	; 223
    1288:	88 bb       	out	0x18, r24	; 24
		


		state=Red;
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <state>

	
		leds_init();
    1290:	0e 94 0e 01 	call	0x21c	; 0x21c <leds_init>
		ADC_init(); /* initialize ADC driver */
    1294:	0e 94 ed 00 	call	0x1da	; 0x1da <ADC_init>
		display_seg_init(PC);
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	0e 94 53 00 	call	0xa6	; 0xa6 <display_seg_init>
		pwm_init();
    129e:	0e 94 03 01 	call	0x206	; 0x206 <pwm_init>
		pwm_fun(179);
    12a2:	83 eb       	ldi	r24, 0xB3	; 179
    12a4:	0e 94 0c 01 	call	0x218	; 0x218 <pwm_fun>

	
	
	xTaskCreate(Task1_Func,"first",configMINIMAL_STACK_SIZE,NULL,3,&task1ptr);
    12a8:	0f 2e       	mov	r0, r31
    12aa:	fc ed       	ldi	r31, 0xDC	; 220
    12ac:	ef 2e       	mov	r14, r31
    12ae:	f6 e0       	ldi	r31, 0x06	; 6
    12b0:	ff 2e       	mov	r15, r31
    12b2:	f0 2d       	mov	r31, r0
    12b4:	03 e0       	ldi	r16, 0x03	; 3
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	45 e5       	ldi	r20, 0x55	; 85
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	60 e8       	ldi	r22, 0x80	; 128
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	8c e8       	ldi	r24, 0x8C	; 140
    12c4:	98 e0       	ldi	r25, 0x08	; 8
    12c6:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskCreate>
	xTaskCreate(Task2_Func,"second",configMINIMAL_STACK_SIZE,NULL,2,&task2ptr);
    12ca:	0f 2e       	mov	r0, r31
    12cc:	fa ed       	ldi	r31, 0xDA	; 218
    12ce:	ef 2e       	mov	r14, r31
    12d0:	f6 e0       	ldi	r31, 0x06	; 6
    12d2:	ff 2e       	mov	r15, r31
    12d4:	f0 2d       	mov	r31, r0
    12d6:	02 e0       	ldi	r16, 0x02	; 2
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	45 e5       	ldi	r20, 0x55	; 85
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	66 e8       	ldi	r22, 0x86	; 134
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	8c ec       	ldi	r24, 0xCC	; 204
    12e6:	98 e0       	ldi	r25, 0x08	; 8
    12e8:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskCreate>
	xTaskCreate(emergencydetection_Func,"third",configMINIMAL_STACK_SIZE,NULL,2,&task3ptr);
    12ec:	0f 2e       	mov	r0, r31
    12ee:	f7 ed       	ldi	r31, 0xD7	; 215
    12f0:	ef 2e       	mov	r14, r31
    12f2:	f6 e0       	ldi	r31, 0x06	; 6
    12f4:	ff 2e       	mov	r15, r31
    12f6:	f0 2d       	mov	r31, r0
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	45 e5       	ldi	r20, 0x55	; 85
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	6d e8       	ldi	r22, 0x8D	; 141
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	8c e0       	ldi	r24, 0x0C	; 12
    1306:	99 e0       	ldi	r25, 0x09	; 9
    1308:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskCreate>
	


	vTaskStartScheduler();
    130c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <vTaskStartScheduler>
    1310:	ff cf       	rjmp	.-2      	; 0x1310 <main+0x92>

00001312 <__udivmodsi4>:
    1312:	a1 e2       	ldi	r26, 0x21	; 33
    1314:	1a 2e       	mov	r1, r26
    1316:	aa 1b       	sub	r26, r26
    1318:	bb 1b       	sub	r27, r27
    131a:	fd 01       	movw	r30, r26
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <__udivmodsi4_ep>

0000131e <__udivmodsi4_loop>:
    131e:	aa 1f       	adc	r26, r26
    1320:	bb 1f       	adc	r27, r27
    1322:	ee 1f       	adc	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	a2 17       	cp	r26, r18
    1328:	b3 07       	cpc	r27, r19
    132a:	e4 07       	cpc	r30, r20
    132c:	f5 07       	cpc	r31, r21
    132e:	20 f0       	brcs	.+8      	; 0x1338 <__udivmodsi4_ep>
    1330:	a2 1b       	sub	r26, r18
    1332:	b3 0b       	sbc	r27, r19
    1334:	e4 0b       	sbc	r30, r20
    1336:	f5 0b       	sbc	r31, r21

00001338 <__udivmodsi4_ep>:
    1338:	66 1f       	adc	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	1a 94       	dec	r1
    1342:	69 f7       	brne	.-38     	; 0x131e <__udivmodsi4_loop>
    1344:	60 95       	com	r22
    1346:	70 95       	com	r23
    1348:	80 95       	com	r24
    134a:	90 95       	com	r25
    134c:	9b 01       	movw	r18, r22
    134e:	ac 01       	movw	r20, r24
    1350:	bd 01       	movw	r22, r26
    1352:	cf 01       	movw	r24, r30
    1354:	08 95       	ret

00001356 <__tablejump2__>:
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	05 90       	lpm	r0, Z+
    135c:	f4 91       	lpm	r31, Z
    135e:	e0 2d       	mov	r30, r0
    1360:	09 94       	ijmp

00001362 <__umulhisi3>:
    1362:	a2 9f       	mul	r26, r18
    1364:	b0 01       	movw	r22, r0
    1366:	b3 9f       	mul	r27, r19
    1368:	c0 01       	movw	r24, r0
    136a:	a3 9f       	mul	r26, r19
    136c:	70 0d       	add	r23, r0
    136e:	81 1d       	adc	r24, r1
    1370:	11 24       	eor	r1, r1
    1372:	91 1d       	adc	r25, r1
    1374:	b2 9f       	mul	r27, r18
    1376:	70 0d       	add	r23, r0
    1378:	81 1d       	adc	r24, r1
    137a:	11 24       	eor	r1, r1
    137c:	91 1d       	adc	r25, r1
    137e:	08 95       	ret

00001380 <_exit>:
    1380:	f8 94       	cli

00001382 <__stop_program>:
    1382:	ff cf       	rjmp	.-2      	; 0x1382 <__stop_program>
